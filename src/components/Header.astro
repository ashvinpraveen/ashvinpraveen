---
import { SITE_TITLE } from '../consts';
import HeaderLink from './HeaderLink.astro';
import { Icon } from 'astro-icon/components';
import AuthButtons from './AuthButtons.astro';
---

<header>
	<nav>
		<h2><a href="/">{SITE_TITLE}</a></h2>
		<div class="internal-links">
			<HeaderLink href="/">Home</HeaderLink>
			<HeaderLink href="/blog">Blog</HeaderLink>
			<HeaderLink href="/about">About</HeaderLink>
		</div>
		<div class="right">
			<div class="social-links">
			<a href="https://instagram.com/ashvinpraveen" aria-label="Instagram" class="icon-link"><Icon name="simple-icons:instagram" width="18" height="18" aria-hidden="true" /></a>
			<a href="https://threads.net/ashvinpraveen" aria-label="Threads" class="icon-link"><Icon name="simple-icons:threads" width="18" height="18" aria-hidden="true" /></a>
			<a href="https://linkedin.com/in/ashvinpraveen" aria-label="LinkedIn" class="icon-link"><Icon name="simple-icons:linkedin" width="18" height="18" aria-hidden="true" /></a>
			<a href="https://x.com/ashvinpk" aria-label="X" class="icon-link"><Icon name="simple-icons:x" width="18" height="18" aria-hidden="true" /></a>
			<a href="https://github.com/ashvinpraveen" aria-label="GitHub" class="icon-link"><Icon name="simple-icons:github" width="18" height="18" aria-hidden="true" /></a>
			</div>
      <AuthButtons />
	</nav>
</header>
<style>
	header { margin: 0; padding: 0 1em; background: transparent; }
	h2 {
		margin: 0;
		font-size: 1em;
	}

	h2 a,
	h2 a.active {
		text-decoration: none;
	}
	nav {
		display: flex;
		align-items: center;
		justify-content: space-between;
		max-width: 980px;
		margin: 16px auto;
		padding: 0 0.75rem;
		border-radius: 16px;
		background: hsl(0 0% 0% / 0.45);
		backdrop-filter: blur(12px);
		-webkit-backdrop-filter: blur(12px);
		border: 1px solid var(--color-border-subtle);
		box-shadow: 0 8px 30px hsl(0 0% 0% / 0.2), 0 4px 10px hsl(0 0% 0% / 0.12);
		position: sticky;
		top: 16px;
		z-index: 50;
	}
	nav a {
		padding: 1em 0.5em;
		color: var(--typography-link-hover);
		border-bottom: 4px solid transparent;
		text-decoration: none;
	}
	/* Make primary nav links smaller and gray by default */
	.internal-links a {
		font-size: 0.85rem;
		color: var(--typography-subtle);
		padding: 0.75em 0.5em;
	}
	.internal-links a:hover {
		color: var(--typography-muted);
	}
	.internal-links a.active {
		color: var(--typography-heading-primary);
		border-bottom-color: transparent;
	}
	h2 a, h2 a.active { color: var(--typography-link-hover); }
		.right { display: flex; align-items: center; gap: 0.5rem; }
		.social-links { display: flex; gap: 0.25rem; }
		.social-links a { display: inline-flex; align-items: center; justify-content: center; color: var(--typography-muted); }
		.social-links a:hover { color: var(--typography-link-hover); }

	@media (max-width: 720px) {
			.social-links { display: none; }
			.internal-links { display: none; }
		}
	</style>

<script is:inline>
  (function () {
    const btn = document.getElementById('theme-toggle');
    if (!btn) return;
    const modes = ['auto', 'dark', 'light'];
    function currentPref() {
      const v = localStorage.getItem('theme-preference');
      return v === 'light' || v === 'dark' || v === 'auto' ? v : 'auto';
    }
    function apply(mode) {
      const root = document.documentElement;
      if (mode === 'auto') {
        root.removeAttribute('data-theme');
        root.dataset.userTheme = 'auto';
      } else {
        root.setAttribute('data-theme', mode);
        root.dataset.userTheme = mode;
      }
      localStorage.setItem('theme-preference', mode);
      // Update effective theme immediately
      const mq = window.matchMedia('(prefers-color-scheme: dark)');
      root.dataset.effectiveTheme = mode === 'auto' ? (mq.matches ? 'dark' : 'light') : mode;
      updateLabel();
    }
    function updateLabel() {
      const pref = currentPref();
      const mq = window.matchMedia('(prefers-color-scheme: dark)');
      let effective = pref;
      if (pref === 'auto') effective = mq.matches ? 'dark' : 'light';
      const label = document.getElementById('theme-toggle-label');
      if (label) label.textContent = `Theme: ${pref} (effective ${effective})`;
      btn.setAttribute('aria-pressed', pref !== 'auto');
      btn.title = `Theme: ${pref} (${effective})`;
    }
    btn.addEventListener('click', () => {
      const pref = currentPref();
      const next = modes[(modes.indexOf(pref) + 1) % modes.length];
      apply(next);
    });
    updateLabel();
  })();
</script>
