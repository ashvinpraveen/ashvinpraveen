---
export interface Props {
	id?: string;
	placeholder?: string;
	content?: string;
	editable?: boolean;
	showBubbleMenu?: boolean;
	showContextMenu?: boolean;
	showUploadModal?: boolean;
	class?: string;
	isOwner?: boolean;
	slug?: string;
	pageKey?: string;
	onSave?: (content: string) => void;
}

const {
	id = 'enhanced-tiptap-editor',
	placeholder = 'Start typing...',
	content = '',
	editable = false,
	showBubbleMenu = true,
	showContextMenu = true,
	showUploadModal = true,
	class: className = '',
	isOwner = false,
	slug = '',
	pageKey = 'default',
	onSave
} = Astro.props;
---

<div class={`enhanced-tiptap-wrapper ${className}`}>
	<!-- Editor Container -->
	<div
		id={id}
		class="enhanced-tiptap-editor"
		data-placeholder={placeholder}
		data-content={content}
		data-editable={editable}
		data-show-bubble-menu={showBubbleMenu}
		data-show-context-menu={showContextMenu}
		data-show-upload-modal={showUploadModal}
		data-is-owner={isOwner}
		data-slug={slug}
		data-page-key={pageKey}
	></div>

	{showBubbleMenu && isOwner && (
		<!-- Bubble Menu for Text Selection -->
		<div id={`${id}-bubble-menu`} class="bubble-menu">
			<button class="menu-btn" data-action="bold">
				<i data-lucide="bold"></i>
			</button>
			<button class="menu-btn" data-action="italic">
				<i data-lucide="italic"></i>
			</button>
			<button class="menu-btn" data-action="link">
				<i data-lucide="link"></i>
			</button>
			<div class="menu-divider"></div>
			<button class="menu-btn" data-action="h1">H1</button>
			<button class="menu-btn" data-action="h2">H2</button>
			<button class="menu-btn" data-action="h3">H3</button>
		</div>
	)}

	{showContextMenu && isOwner && (
		<!-- Enhanced Context Menu with all advanced features -->
		<div id={`${id}-context-menu`} class="context-menu">
			<!-- Text Formatting -->
			<div class="menu-section">
				<button class="menu-btn" data-action="bold">
					<i data-lucide="bold"></i>
					Bold
				</button>
				<button class="menu-btn" data-action="italic">
					<i data-lucide="italic"></i>
					Italic
				</button>
				<button class="menu-btn" data-action="underline">
					<i data-lucide="underline"></i>
					Underline
				</button>
				<button class="menu-btn" data-action="highlight">
					<i data-lucide="highlighter"></i>
					Highlight
				</button>
			</div>

			<!-- Headings -->
			<div class="menu-section">
				<button class="menu-btn" data-action="h1">
					<i data-lucide="heading-1"></i>
					Heading 1
				</button>
				<button class="menu-btn" data-action="h2">
					<i data-lucide="heading-2"></i>
					Heading 2
				</button>
				<button class="menu-btn" data-action="h3">
					<i data-lucide="heading-3"></i>
					Heading 3
				</button>
			</div>

			<!-- Lists -->
			<div class="menu-section">
				<button class="menu-btn" data-action="bulletList">
					<i data-lucide="list"></i>
					Bullet List
				</button>
				<button class="menu-btn" data-action="orderedList">
					<i data-lucide="list-ordered"></i>
					Numbered List
				</button>
				<button class="menu-btn" data-action="taskList">
					<i data-lucide="list-todo"></i>
					Task List
				</button>
			</div>

			<!-- Media -->
			<div class="menu-section">
				<button class="menu-btn" data-action="image">
					<i data-lucide="image"></i>
					Add Image
				</button>
				<button class="menu-btn" data-action="youtube">
					<i data-lucide="youtube"></i>
					Add Video
				</button>
				<button class="menu-btn" data-action="table">
					<i data-lucide="table"></i>
					Add Table
				</button>
			</div>

			<!-- Advanced -->
			<div class="menu-section">
				<button class="menu-btn" data-action="blockquote">
					<i data-lucide="quote"></i>
					Quote
				</button>
				<button class="menu-btn" data-action="link">
					<i data-lucide="link"></i>
					Add Link
				</button>
			</div>
		</div>
	)}

	{showUploadModal && isOwner && (
		<!-- Enhanced Upload Modal -->
		<div id={`${id}-url-modal`} class="url-modal">
			<div class="modal-content">
				<div class="modal-header">
					<h3 id={`${id}-modal-title`}>Add Content</h3>
					<button id={`${id}-close-modal`} class="close-btn">×</button>
				</div>
				<div class="modal-body">
					<div class="input-group">
						<input type="text" id={`${id}-url-input`} placeholder="Enter URL..." />
						<button id={`${id}-url-submit`} class="submit-btn">Add</button>
					</div>
					<div class="divider">
						<span>or</span>
					</div>
					<div class="upload-area">
						<input type="file" id={`${id}-file-input`} accept="image/*" style="display: none;" />
						<button id={`${id}-upload-trigger`} class="upload-btn">
							<i data-lucide="upload"></i>
							Upload Image
						</button>
					</div>
					<div id={`${id}-upload-progress`} class="upload-progress">
						<div class="progress-bar">
							<div id={`${id}-progress-fill`} class="progress-fill"></div>
						</div>
						<div id={`${id}-progress-text`} class="progress-text">Uploading...</div>
					</div>
				</div>
			</div>
		</div>
	)}
</div>

<style>
	/* Enhanced TipTap Editor Styles - Extracted from about.astro */
	.enhanced-tiptap-wrapper {
		position: relative;
		width: 100%;
		max-width: none;
		margin: 0;
		overflow: visible;
		display: block;
	}

	/* Global override for all focus outlines */
	.enhanced-tiptap-wrapper * {
		outline: none !important;
	}

	.enhanced-tiptap-wrapper *:focus {
		outline: none !important;
		border: none !important;
		box-shadow: none !important;
	}

	/* TipTap editor using Tailwind prose */
	.enhanced-tiptap-editor {
		width: 100%;
		min-height: 500px;
		outline: none !important;
		border: none;
		padding: 3rem;
		border-radius: 0px;
		transition: all 0.2s ease;
		cursor: text;
		box-sizing: border-box;
	}

	.enhanced-tiptap-editor[contenteditable="true"] {
		outline: none !important;
		border: none !important;
	}

	/* Remove focus outline from all TipTap content */
	.enhanced-tiptap-editor *:focus {
		outline: none !important;
		box-shadow: none !important;
	}

	/* Target TipTap's ProseMirror editor specifically */
	.enhanced-tiptap-wrapper .ProseMirror {
		width: 100% !important;
		max-width: none !important;
		outline: none !important;
		border: none !important;
		box-shadow: none !important;
		box-sizing: border-box;
	}

	.enhanced-tiptap-wrapper .ProseMirror:focus {
		outline: none !important;
		border: none !important;
		box-shadow: none !important;
	}

	/* Override any prose styling that might constrain width */
	.enhanced-tiptap-wrapper .prose {
		width: 100% !important;
		max-width: none !important;
	}

	/* Ensure paragraphs and other elements don't expand beyond container */
	.enhanced-tiptap-wrapper .ProseMirror p,
	.enhanced-tiptap-wrapper .ProseMirror div,
	.enhanced-tiptap-wrapper .ProseMirror h1,
	.enhanced-tiptap-wrapper .ProseMirror h2,
	.enhanced-tiptap-wrapper .ProseMirror h3 {
		width: 100%;
		word-wrap: break-word;
		overflow-wrap: break-word;
	}

	/* Bubble Menu Styles */
	.bubble-menu {
		display: flex;
		gap: 0.25rem;
		align-items: center;
		background: hsl(0 0% 0% / 0.9);
		backdrop-filter: blur(20px);
		border: 1px solid hsl(0 0% 100% / 0.15);
		border-radius: 8px;
		padding: 0.5rem;
		box-shadow: 0 8px 24px hsl(0 0% 0% / 0.4);
		z-index: 1000;
		visibility: hidden;
		opacity: 0;
		transition: all 0.2s ease;
	}

	/* Menu Button Styles */
	.menu-btn {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		padding: 0.5rem;
		background: hsl(0 0% 100% / 0.06);
		border: 1px solid hsl(0 0% 100% / 0.1);
		border-radius: 6px;
		color: hsl(0 0% 100% / 0.7);
		cursor: pointer;
		font-size: 0.875rem;
		font-weight: 500;
		transition: all 0.15s ease;
		white-space: nowrap;
		width: auto;
		text-align: left;
		justify-content: center;
	}

	.menu-btn:hover {
		background: hsl(0 0% 100% / 0.15);
		border-color: hsl(0 0% 100% / 0.25);
	}

	.menu-btn.active {
		background: hsl(235 100% 60% / 0.2);
		border-color: hsl(235 100% 60% / 0.4);
		color: hsl(235 100% 80%);
	}

	.menu-divider {
		width: 1px;
		height: 1.5rem;
		background: hsl(0 0% 100% / 0.15);
		margin: 0 0.25rem;
	}

	/* Context Menu Styles */
	.context-menu {
		display: flex;
		flex-direction: column;
		gap: 0;
		background: hsl(0 0% 0% / 0.95);
		backdrop-filter: blur(20px);
		border: 1px solid hsl(0 0% 100% / 0.15);
		border-radius: 8px;
		padding: 0.25rem;
		box-shadow: 0 8px 24px hsl(0 0% 0% / 0.4);
		z-index: 9999 !important;
		visibility: hidden;
		opacity: 0;
		transition: all 0.15s ease;
		min-width: 180px;
		max-width: 220px;
		max-height: 80vh;
		overflow-y: auto;
		position: fixed !important;
		pointer-events: auto !important;
	}

	.menu-section {
		display: flex;
		flex-direction: column;
		gap: 0;
		padding: 0.25rem 0;
	}

	.menu-section:not(:last-child) {
		border-bottom: 1px solid hsl(0 0% 100% / 0.08);
		margin-bottom: 0.25rem;
		padding-bottom: 0.5rem;
	}

	/* Context menu buttons - vertical layout */
	.context-menu .menu-btn {
		padding: 0.75rem;
		background: transparent;
		border: none;
		width: 100%;
		justify-content: flex-start;
	}

	.context-menu .menu-btn:hover {
		background: hsl(0 0% 100% / 0.08);
	}

	/* Modal Styles */
	.url-modal {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: hsl(0 0% 0% / 0.8);
		backdrop-filter: blur(8px);
		display: flex;
		align-items: center;
		justify-content: center;
		z-index: 10000;
		opacity: 0;
		visibility: hidden;
		transition: all 0.2s ease;
	}

	.url-modal.active {
		opacity: 1;
		visibility: visible;
	}

	.modal-content {
		background: hsl(0 0% 0% / 0.95);
		backdrop-filter: blur(20px);
		border: 1px solid hsl(0 0% 100% / 0.15);
		border-radius: 12px;
		padding: 0;
		min-width: 400px;
		max-width: 500px;
		box-shadow: 0 20px 40px hsl(0 0% 0% / 0.3);
		transform: scale(0.95);
		transition: transform 0.2s ease;
	}

	.url-modal.active .modal-content {
		transform: scale(1);
	}

	.modal-header {
		padding: 1.5rem;
		border-bottom: 1px solid hsl(0 0% 100% / 0.1);
		display: flex;
		align-items: center;
		justify-content: space-between;
	}

	.modal-header h3 {
		margin: 0;
		color: hsl(0 0% 90%);
		font-size: 1.1rem;
		font-weight: 600;
	}

	.close-btn {
		background: none;
		border: none;
		color: hsl(0 0% 70%);
		font-size: 1.5rem;
		cursor: pointer;
		padding: 0.25rem;
		transition: color 0.2s ease;
	}

	.close-btn:hover {
		color: hsl(0 0% 90%);
	}

	.modal-body {
		padding: 1.5rem;
	}

	.input-group {
		display: flex;
		gap: 0.75rem;
		margin-bottom: 1rem;
	}

	.input-group input {
		flex: 1;
		padding: 0.75rem;
		background: hsl(0 0% 100% / 0.05);
		border: 1px solid hsl(0 0% 100% / 0.15);
		border-radius: 8px;
		color: hsl(0 0% 90%);
		font-size: 0.875rem;
		transition: all 0.2s ease;
	}

	.input-group input:focus {
		outline: none;
		border-color: hsl(235 100% 60%);
		background: hsl(0 0% 100% / 0.08);
	}

	.input-group input::placeholder {
		color: hsl(0 0% 50%);
	}

	.submit-btn, .upload-btn {
		padding: 0.75rem 1.5rem;
		background: hsl(235 100% 60%);
		border: none;
		border-radius: 8px;
		color: white;
		font-size: 0.875rem;
		font-weight: 500;
		cursor: pointer;
		transition: all 0.2s ease;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.submit-btn:hover, .upload-btn:hover {
		background: hsl(235 100% 55%);
		transform: translateY(-1px);
	}

	.divider {
		text-align: center;
		position: relative;
		margin: 1.5rem 0;
		color: hsl(0 0% 60%);
		font-size: 0.875rem;
	}

	.divider::before {
		content: '';
		position: absolute;
		top: 50%;
		left: 0;
		right: 0;
		height: 1px;
		background: hsl(0 0% 100% / 0.1);
		z-index: -1;
	}

	.divider span {
		background: hsl(0 0% 0% / 0.95);
		padding: 0 1rem;
	}

	.upload-area {
		text-align: center;
	}

	.upload-btn {
		width: 100%;
		justify-content: center;
		background: hsl(0 0% 100% / 0.05);
		color: hsl(0 0% 80%);
		border: 2px dashed hsl(0 0% 100% / 0.2);
	}

	.upload-btn:hover {
		background: hsl(0 0% 100% / 0.08);
		border-color: hsl(235 100% 60%);
		color: hsl(235 100% 80%);
	}

	.upload-btn i[data-lucide] {
		width: 20px;
		height: 20px;
	}

	.upload-progress {
		display: none;
		margin-top: 1rem;
	}

	.progress-bar {
		width: 100%;
		height: 8px;
		background: hsl(0 0% 100% / 0.1);
		border-radius: 4px;
		overflow: hidden;
		margin-bottom: 0.5rem;
	}

	.progress-fill {
		height: 100%;
		background: linear-gradient(90deg, hsl(235 100% 60%), hsl(260 100% 60%));
		width: 0%;
		transition: width 0.3s ease;
		border-radius: 4px;
	}

	.progress-text {
		text-align: center;
		color: hsl(0 0% 70%);
		font-size: 0.875rem;
	}

	/* Lucide Icon Styling */
	.menu-btn i[data-lucide] {
		width: 16px;
		height: 16px;
	}
</style>

<script type="module">
	// ============================================
	// ENHANCED TIPTAP EDITOR JAVASCRIPT
	// Features: Advanced Editor, Image Upload, Context Menus
	// ============================================

	// Import TipTap modules
	import { Editor } from 'https://esm.sh/@tiptap/core@3.4.2'
	import StarterKit from 'https://esm.sh/@tiptap/starter-kit@3.4.2'
	import Placeholder from 'https://esm.sh/@tiptap/extension-placeholder@3.4.2'
	import Link from 'https://esm.sh/@tiptap/extension-link@3.4.2'
	import Image from 'https://esm.sh/@tiptap/extension-image@3.4.2'
	import Youtube from 'https://esm.sh/@tiptap/extension-youtube@3.4.2'
	import BubbleMenu from 'https://esm.sh/@tiptap/extension-bubble-menu@3.4.2'
	import { TableKit } from 'https://esm.sh/@tiptap/extension-table@3.4.2'
	import TaskList from 'https://esm.sh/@tiptap/extension-task-list@3.4.2'
	import TaskItem from 'https://esm.sh/@tiptap/extension-task-item@3.4.2'
	import Underline from 'https://esm.sh/@tiptap/extension-underline@3.4.2'
	import Highlight from 'https://esm.sh/@tiptap/extension-highlight@3.4.2'

	// ============================================
	// GLOBAL VARIABLES
	// ============================================
	let editor = null;

	// Get props from data attributes
	function getEditorConfig() {
		const editorElement = document.querySelector('.enhanced-tiptap-editor');
		if (!editorElement) return null;

		return {
			id: editorElement.id,
			placeholder: editorElement.dataset.placeholder,
			content: editorElement.dataset.content,
			editable: editorElement.dataset.editable === 'true',
			showBubbleMenu: editorElement.dataset.showBubbleMenu === 'true',
			showContextMenu: editorElement.dataset.showContextMenu === 'true',
			showUploadModal: editorElement.dataset.showUploadModal === 'true',
			isOwner: editorElement.dataset.isOwner === 'true',
			slug: editorElement.dataset.slug,
			pageKey: editorElement.dataset.pageKey
		};
	}

	// ============================================
	// AUTO-SAVE FUNCTIONS
	// ============================================
	let saveTimeout;

	function handleContentChange(content) {
		const config = getEditorConfig();
		if (!config || !config.slug || !config.pageKey) return;

		// Save immediately to localStorage for instant feedback
		const storageKey = `${config.pageKey}-content-${config.slug}`;
		localStorage.setItem(storageKey, content);

		// Debounced save to Convex (wait 2 seconds after user stops typing)
		clearTimeout(saveTimeout);
		saveTimeout = setTimeout(() => {
			saveToConvex(content, config.slug);
		}, 2000);
	}

	async function saveToConvex(content, slug) {
		// Check if Convex data manager is available (from React component)
		if (typeof window !== 'undefined' && window.convexDataManager) {
			window.convexDataManager.saveContent(content);
		} else {
			// Fallback to manual API call if streaming not available
			try {
				const formData = new FormData();
				formData.append('key', slug);
				formData.append('title', 'About');
				formData.append('content', content);

				const response = await fetch('/api/pages/upsert', {
					method: 'POST',
					body: formData
				});

				if (response.ok) {
					console.log('✅ Content saved to Convex via API fallback');
				} else {
					const errorText = await response.text();
					console.error('❌ Failed to save to Convex:', response.status, errorText);
				}
			} catch (error) {
				console.error('❌ Failed to save to Convex:', error);
			}
		}
	}

	// ============================================
	// INITIALIZATION FUNCTIONS
	// ============================================
	function getInitialContent() {
		const config = getEditorConfig();
		if (!config) return '<p>Loading...</p>';

		// Try to load content from localStorage or API
		if (typeof window !== 'undefined' && config.slug && config.pageKey) {
			const storageKey = `${config.pageKey}-content-${config.slug}`;
			const savedContent = localStorage.getItem(storageKey);
			if (savedContent) {
				return savedContent;
			}
		}

		// Return default content based on props
		if (config.content) {
			return config.content;
		}

		// Default template content for About page
		if (config.isOwner) {
			return `
				<h1>About</h1>
				<p>Welcome to my about page! This is where you can share your story, background, and what makes you unique.</p>

				<h2>Background</h2>
				<p>Tell visitors about your professional background, education, or journey that led you to where you are today.</p>

				<h2>Interests & Passions</h2>
				<p>Share what you're passionate about, your hobbies, or areas of expertise that define who you are.</p>

				<h2>Get in Touch</h2>
				<p>Let people know how they can connect with you or learn more about your work.</p>

				<p><em>💡 Tip: Click anywhere to start editing this content and make it your own!</em></p>
			`.trim();
		} else {
			return '<p>No about information available yet.</p>';
		}
	}

	function initializeEnhancedEditor() {
		console.log('🚀 Starting EnhancedTipTapEditor initialization...');
		const config = getEditorConfig();
		console.log('📊 Editor config:', config);
		if (!config) {
			console.error('❌ Enhanced TipTap Editor: Could not find editor configuration');
			return;
		}

		const extensions = [
			StarterKit.configure({
				link: false,
				underline: false,
			}),
			Placeholder.configure({
				placeholder: config.placeholder,
			}),
			Link.configure({
				openOnClick: false,
				HTMLAttributes: {
					class: 'editor-link',
				},
			}),
			Image.configure({
				inline: false,
				allowBase64: false,
				HTMLAttributes: {
					class: 'editor-image',
				},
			}),
			Youtube.configure({
				inline: false,
				width: 640,
				height: 360,
				controls: true,
				nocookie: true,
				allowFullscreen: true,
				HTMLAttributes: {
					class: 'youtube-video',
				},
			}),
			TableKit.configure({
				resizable: true,
			}),
			TaskList,
			TaskItem.configure({
				nested: true,
			}),
			Underline,
			Highlight,
		];

		// Add bubble menu if enabled and user is owner
		if (config.showBubbleMenu && config.isOwner) {
			extensions.push(
				BubbleMenu.configure({
					element: document.querySelector(`#${config.id}-bubble-menu`),
					shouldShow: ({ from, to }) => {
						return from !== to;
					},
				})
			);
		}

		console.log('🎯 Creating TipTap Editor with extensions:', extensions.length);
		console.log('📝 Initial content:', getInitialContent());
		console.log('🔧 Editor element found:', document.querySelector(`#${config.id}`));

		try {
			editor = new Editor({
				element: document.querySelector(`#${config.id}`),
				extensions: extensions,
				content: getInitialContent(),
				editable: config.editable,
				editorProps: {
					attributes: {
						class: 'prose prose-invert max-w-none',
					},
				},
				onUpdate: ({ editor }) => {
					console.log('✏️ Editor content updated');
					handleContentChange(editor.getHTML());
				},
			});
			console.log('✅ TipTap Editor created successfully:', editor);
		} catch (error) {
			console.error('❌ Failed to create TipTap Editor:', error);
			return;
		}

		// Setup event listeners
		setupEnhancedMenuEventListeners();

		if (config.showContextMenu && config.isOwner) {
			setupEnhancedContextMenu();
		}

		if (config.showUploadModal && config.isOwner) {
			setupUploadModal();
		}

		return editor;
	}

	// ============================================
	// MENU & EVENT HANDLING FUNCTIONS
	// ============================================
	function setupEnhancedMenuEventListeners() {
		const config = getEditorConfig();
		if (!config) return;

		// Bubble menu event listeners
		if (config.showBubbleMenu && config.isOwner) {
			document.querySelectorAll(`#${config.id}-bubble-menu .menu-btn`).forEach(btn => {
				btn.addEventListener('click', (e) => {
					const action = e.currentTarget.dataset.action;
					handleEnhancedMenuAction(action);
				});
			});
		}

		// Context menu event listeners
		if (config.showContextMenu && config.isOwner) {
			document.querySelectorAll(`#${config.id}-context-menu .menu-btn`).forEach(btn => {
				btn.addEventListener('click', (e) => {
					const action = e.currentTarget.dataset.action;
					handleEnhancedMenuAction(action);
					hideEnhancedContextMenu();
				});
			});
		}
	}

	function setupEnhancedContextMenu() {
		const config = getEditorConfig();
		if (!config) return;

		const contextMenu = document.querySelector(`#${config.id}-context-menu`);
		const editorElement = document.querySelector(`#${config.id}`);

		if (!contextMenu || !editorElement) return;

		// Right-click handler
		document.addEventListener('contextmenu', (e) => {
			if (!editor || !editor.isEditable) return;

			const editorRect = editorElement.getBoundingClientRect();
			const isInsideEditor = (
				e.clientX >= editorRect.left &&
				e.clientX <= editorRect.right &&
				e.clientY >= editorRect.top &&
				e.clientY <= editorRect.bottom
			);

			if (isInsideEditor) {
				e.preventDefault();
				e.stopPropagation();
				// Use pageX/pageY for accurate positioning relative to document
				const x = e.pageX;
				const y = e.pageY;
				showEnhancedContextMenu(x, y);
			}
		}, true);

		// Hide on click outside
		document.addEventListener('click', (e) => {
			if (!contextMenu.contains(e.target)) {
				hideEnhancedContextMenu();
			}
		});
	}

	function setupUploadModal() {
		const config = getEditorConfig();
		if (!config) return;

		const modal = document.querySelector(`#${config.id}-url-modal`);
		const closeBtn = document.querySelector(`#${config.id}-close-modal`);
		const urlSubmit = document.querySelector(`#${config.id}-url-submit`);
		const uploadTrigger = document.querySelector(`#${config.id}-upload-trigger`);
		const fileInput = document.querySelector(`#${config.id}-file-input`);

		if (closeBtn) {
			closeBtn.addEventListener('click', hideEnhancedModal);
		}

		if (urlSubmit) {
			urlSubmit.addEventListener('click', handleUrlSubmit);
		}

		if (uploadTrigger) {
			uploadTrigger.addEventListener('click', () => {
				fileInput?.click();
			});
		}

		if (fileInput) {
			fileInput.addEventListener('change', handleEnhancedFileUpload);
		}
	}

	function handleEnhancedMenuAction(action) {
		if (!editor) return;

		switch (action) {
			case 'bold':
				editor.chain().focus().toggleBold().run();
				break;
			case 'italic':
				editor.chain().focus().toggleItalic().run();
				break;
			case 'underline':
				editor.chain().focus().toggleUnderline().run();
				break;
			case 'highlight':
				editor.chain().focus().toggleHighlight().run();
				break;
			case 'h1':
				editor.chain().focus().toggleHeading({ level: 1 }).run();
				break;
			case 'h2':
				editor.chain().focus().toggleHeading({ level: 2 }).run();
				break;
			case 'h3':
				editor.chain().focus().toggleHeading({ level: 3 }).run();
				break;
			case 'bulletList':
				editor.chain().focus().toggleBulletList().run();
				break;
			case 'orderedList':
				editor.chain().focus().toggleOrderedList().run();
				break;
			case 'taskList':
				editor.chain().focus().toggleTaskList().run();
				break;
			case 'image':
				showEnhancedModal('Add Image');
				break;
			case 'youtube':
				showEnhancedModal('Add Video');
				break;
			case 'table':
				editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run();
				break;
			case 'blockquote':
				editor.chain().focus().toggleBlockquote().run();
				break;
			case 'link':
				const url = prompt('Enter URL:');
				if (url) {
					editor.chain().focus().setLink({ href: url }).run();
				}
				break;
		}
	}

	// ============================================
	// MODAL & UI FUNCTIONS
	// ============================================
	function showEnhancedModal(title) {
		const config = getEditorConfig();
		if (!config) return;

		const modal = document.querySelector(`#${config.id}-url-modal`);
		const modalTitle = document.querySelector(`#${config.id}-modal-title`);

		if (modal && modalTitle) {
			modalTitle.textContent = title;
			modal.classList.add('active');
		}
	}

	function hideEnhancedModal() {
		const config = getEditorConfig();
		if (!config) return;

		const modal = document.querySelector(`#${config.id}-url-modal`);
		if (modal) {
			modal.classList.remove('active');
		}
	}

	function showEnhancedContextMenu(x, y) {
		const config = getEditorConfig();
		if (!config) return;

		const contextMenu = document.querySelector(`#${config.id}-context-menu`);
		if (!contextMenu) return;

		// Convert page coordinates to viewport coordinates for fixed positioning
		const viewportX = x - window.pageXOffset;
		const viewportY = y - window.pageYOffset;

		// Make menu visible but off-screen to measure dimensions
		contextMenu.style.position = 'fixed';
		contextMenu.style.left = '-9999px';
		contextMenu.style.top = '-9999px';
		contextMenu.style.visibility = 'visible';

		// Get menu dimensions
		const menuRect = contextMenu.getBoundingClientRect();
		const viewportWidth = window.innerWidth;
		const viewportHeight = window.innerHeight;

		// Calculate optimal position (right next to mouse, but within viewport)
		let menuX = viewportX;
		let menuY = viewportY;

		// Adjust horizontal position if menu would go off-screen
		if (menuX + menuRect.width > viewportWidth) {
			menuX = viewportWidth - menuRect.width - 10; // 10px padding from edge
		}

		// Adjust vertical position if menu would go off-screen
		if (menuY + menuRect.height > viewportHeight) {
			menuY = viewportHeight - menuRect.height - 10; // 10px padding from edge
		}

		// Ensure menu doesn't go off the left or top edge
		menuX = Math.max(10, menuX);
		menuY = Math.max(10, menuY);

		// Apply final position
		contextMenu.style.left = menuX + 'px';
		contextMenu.style.top = menuY + 'px';
		contextMenu.style.opacity = '1';
	}

	function hideEnhancedContextMenu() {
		const config = getEditorConfig();
		if (!config) return;

		const contextMenu = document.querySelector(`#${config.id}-context-menu`);
		if (contextMenu) {
			contextMenu.style.visibility = 'hidden';
			contextMenu.style.opacity = '0';
		}
	}

	// ============================================
	// SIMPLIFIED UPLOAD FUNCTIONS (Placeholder)
	// ============================================
	function handleUrlSubmit() {
		const config = getEditorConfig();
		if (!config) return;

		const urlInput = document.querySelector(`#${config.id}-url-input`);
		const url = urlInput?.value;

		if (url && editor) {
			if (url.includes('youtube.com') || url.includes('youtu.be')) {
				editor.chain().focus().setYoutubeVideo({ src: url }).run();
			} else {
				editor.chain().focus().setImage({ src: url }).run();
			}
			hideEnhancedModal();
			urlInput.value = '';
		}
	}

	async function handleEnhancedFileUpload(event) {
		const file = event.target.files[0];
		if (!file || !editor) return;

		// Simple file upload - could be enhanced with compression and progress
		const reader = new FileReader();
		reader.onload = (e) => {
			const imageUrl = e.target.result;
			editor.chain().focus().setImage({ src: imageUrl }).run();
			hideEnhancedModal();
		};
		reader.readAsDataURL(file);
	}

	// ============================================
	// INITIALIZATION
	// ============================================
	function initializeEnhancedComponent() {
		// Initialize Lucide icons
		if (typeof lucide !== 'undefined') {
			lucide.createIcons();
		}

		// Initialize enhanced editor
		initializeEnhancedEditor();

		// Expose editor globally
		exposeEditorGlobally();
	}

	// Expose editor instance globally
	function exposeEditorGlobally() {
		const config = getEditorConfig();
		if (config) {
			window[`${config.id}Editor`] = {
				getEditor: () => editor,
				getContent: () => editor?.getHTML() || '',
				setContent: (newContent) => editor?.commands.setContent(newContent),
				setEditable: (isEditable) => editor?.setEditable(isEditable),
				focus: () => editor?.commands.focus(),
			};
		}
	}

	// Initialize when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initializeEnhancedComponent);
	} else {
		initializeEnhancedComponent();
	}
</script>