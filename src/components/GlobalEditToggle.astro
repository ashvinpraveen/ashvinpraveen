---
export interface Props {
  isOwner: boolean;
}

const { isOwner } = Astro.props;
---

{/* GlobalEditToggle is now hidden - edit mode is permanent for owners */}


<script is:inline>
  // Auto-enable edit mode for owners - no toggle UI
  function initializePermanentEditMode() {
    // Check if the current user is an owner based on body attributes
    const isOwner = document.body.dataset.isOwner === 'true';

    if (!isOwner) return;

    // Enable permanent edit mode for owners
    function enablePermanentEditMode() {
      // Add global edit class to body
      document.body.classList.add('global-edit-mode');

      // Enable all editable elements
      const editableElements = document.querySelectorAll('.editable-text, .editable-link');
      editableElements.forEach(element => {
        element.contentEditable = true;
        element.classList.add('editing-active');
      });

      // Set localStorage to true (for compatibility with existing systems)
      localStorage.setItem('editMode', 'true');

      // Dispatch custom event for other components
      window.dispatchEvent(new CustomEvent('editModeChanged', {
        detail: { isEditMode: true }
      }));
    }

    // Enable edit mode immediately
    enablePermanentEditMode();

    // Save changes function for when content is edited
    function saveChanges(changes) {
      // Get current page slug
      const pathParts = window.location.pathname.split('/').filter(Boolean);
      const siteSlug = pathParts[0] || '';

      fetch('/api/profile/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          siteSlug: siteSlug,
          changes: changes
        })
      })
      .then(response => response.json())
      .then(data => {
        // Changes saved successfully
      })
      .catch(error => {
        console.error('Save error:', error);
      });
    }

    // Auto-save on content changes
    const editableElements = document.querySelectorAll('.editable-text, .editable-link');
    editableElements.forEach(element => {
      element.addEventListener('blur', () => {
        const field = element.dataset.field;
        if (field) {
          const changes = {};
          changes[field] = element.textContent.trim();
          saveChanges(changes);
        }
      });
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePermanentEditMode);
  } else {
    initializePermanentEditMode();
  }
</script>