---
import { SITE_TITLE } from '../consts';
import HeaderLink from './HeaderLink.astro';
import { Icon } from 'astro-icon/components';

export const prerender = false;

const user = await Astro.locals.currentUser();
const auth = Astro.locals.auth();

// Check if user is actually authenticated
const isAuthenticated = user && auth && auth.userId;
const preferredUsername = user?.username || user?.primaryEmailAddress?.emailAddress?.split('@')[0] || 'user';

// Detect if we're on a user page
const currentPath = Astro.url.pathname;
const pathParts = currentPath.split('/').filter(Boolean);
const mainSitePages = ['app', 'blog', 'about', 'onboarding', 'sign-in', 'sign-up'];
const isMainSitePage = currentPath === '/' || mainSitePages.some(page => currentPath.startsWith(`/${page}`));
const isUserPage = !isMainSitePage && pathParts.length > 0;

let currentUserSlug = null;
let isCurrentUserOwner = false;

if (isUserPage) {
  currentUserSlug = pathParts[0]; // /username/...

  if (isAuthenticated) {
    const userSlug = user.username || user.primaryEmailAddress?.emailAddress?.split('@')[0] || '';
    isCurrentUserOwner = userSlug.toLowerCase() === currentUserSlug?.toLowerCase();
  }
}
---

<nav class="side-nav">
  <div class="nav-header">
    <h2>
      <a href={isUserPage ? `/${currentUserSlug}` : "/"}>
        {isUserPage ? `${currentUserSlug?.charAt(0).toUpperCase()}${currentUserSlug?.slice(1)}` : SITE_TITLE}
      </a>
    </h2>
    {isUserPage && (
      <p class="nav-subtitle">
        <a href="/" class="back-to-main">‚Üê Back to {SITE_TITLE}</a>
      </p>
    )}
  </div>

  <div class="nav-links">
    {isUserPage ? (
      // User page navigation
      <>
        <HeaderLink href={`/${currentUserSlug}`} class="nav-link">
          <i data-lucide="home"></i>
          <span>Profile</span>
        </HeaderLink>

        <HeaderLink href={`/${currentUserSlug}/blog`} class="nav-link">
          <i data-lucide="file-text"></i>
          <span>Blog</span>
        </HeaderLink>

        <HeaderLink href={`/${currentUserSlug}/about`} class="nav-link">
          <i data-lucide="user"></i>
          <span>About</span>
        </HeaderLink>

        {isCurrentUserOwner && (
          <HeaderLink href="/app" class="nav-link admin-link">
            <i data-lucide="settings"></i>
            <span>Dashboard</span>
          </HeaderLink>
        )}
      </>
    ) : (
      // Main site navigation
      <>
        <HeaderLink href="/" class="nav-link">
          <i data-lucide="home"></i>
          <span>Home</span>
        </HeaderLink>

        <HeaderLink href="/blog" class="nav-link">
          <i data-lucide="file-text"></i>
          <span>Blog</span>
        </HeaderLink>

        <HeaderLink href="/about" class="nav-link">
          <i data-lucide="user"></i>
          <span>About</span>
        </HeaderLink>

        {isAuthenticated && (
          <HeaderLink href="/app" class="nav-link admin-link">
            <i data-lucide="settings"></i>
            <span>Dashboard</span>
          </HeaderLink>
        )}
      </>
    )}
  </div>
  
  <div class="user-status">
    {isAuthenticated ? (
      // Logged in user
      <>
        <a href={`/${preferredUsername}`} class="user-link nav-link">
          <div class="user-avatar">
            <img
              src={user.imageUrl || `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(user.firstName || preferredUsername)}`}
              alt={`${user.firstName || preferredUsername}'s avatar`}
              width="20"
              height="20"
            />
          </div>
          <span>Open your page</span>
        </a>

        <button class="logout-btn nav-link" id="logout-btn">
          <i data-lucide="log-out"></i>
          <span>Sign Out</span>
        </button>
      </>
    ) : (
      // Logged out user - show different content for user pages vs main site
      isUserPage ? (
        <div class="create-account-prompt">
          <p class="prompt-text">Create your own page!</p>
          <button class="signin-btn nav-link" id="signin-btn">
            <i data-lucide="log-in"></i>
            <span>Sign In</span>
          </button>
        </div>
      ) : (
        <button class="signin-btn nav-link" id="signin-btn">
          <i data-lucide="log-in"></i>
          <span>Sign In</span>
        </button>
      )
    )}
  </div>

  <div class="nav-footer">
    <div class="social-links">
      <a href="https://github.com/ashvinpraveen" aria-label="GitHub" class="social-link">
        <Icon name="simple-icons:github" width="18" height="18" />
      </a>
      <a href="https://linkedin.com/in/ashvinpraveen" aria-label="LinkedIn" class="social-link">
        <Icon name="simple-icons:linkedin" width="18" height="18" />
      </a>
      <a href="https://x.com/ashvinpk" aria-label="X" class="social-link">
        <Icon name="simple-icons:x" width="18" height="18" />
      </a>
      <a href="https://instagram.com/ashvinpraveen" aria-label="Instagram" class="social-link">
        <Icon name="simple-icons:instagram" width="18" height="18" />
      </a>
      <a href="https://threads.net/ashvinpraveen" aria-label="Threads" class="social-link">
        <Icon name="simple-icons:threads" width="18" height="18" />
      </a>
    </div>
  </div>
</nav>

<style>
  .side-nav {
    width: fit-content;
    min-height: 100%;
    background: hsl(0 0% 100% / 0.03);
    border-right: 1px solid var(--color-border-subtle);
    display: flex;
    flex-direction: column;
    padding: 24px 0;
    overflow: hidden;
    flex-shrink: 0;
    align-self: stretch;
  }

  .nav-header {
    padding: 0 24px;
    margin-bottom: 32px;
  }

  .nav-header h2 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--typography-heading-primary);
  }

  .nav-header h2 a {
    text-decoration: none;
    color: inherit;
  }

  .nav-subtitle {
    margin: 0.5rem 0 0 0;
    font-size: 0.8rem;
  }

  .back-to-main {
    color: var(--typography-subtle);
    text-decoration: none;
    font-weight: 400;
    transition: color 0.2s ease;
  }

  .back-to-main:hover {
    color: var(--typography-muted);
  }

  .nav-links {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 4px;
    padding: 0 16px;
    min-height: 0;
  }

  .nav-links :global(.nav-link) {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 16px;
    border-radius: 12px;
    color: var(--typography-muted);
    text-decoration: none;
    font-size: 0.95rem;
    font-weight: 500;
    transition: all 0.2s ease;
    border: none;
  }

  .nav-links :global(.nav-link:hover) {
    background: var(--color-border-subtle);
    color: var(--typography-link);
  }

  .nav-links :global(.nav-link.active) {
    background: var(--color-border);
    color: var(--typography-heading-primary);
  }

  .nav-links :global(.nav-link i[data-lucide]) {
    width: 20px;
    height: 20px;
    opacity: 0.8;
    transition: opacity 0.2s ease;
  }

  .nav-links :global(.nav-link:hover i[data-lucide]),
  .nav-links :global(.nav-link.active i[data-lucide]) {
    opacity: 1;
  }

  .user-status {
    padding: 0 16px 16px 16px;
    border-bottom: 1px solid var(--color-border-subtle);
    margin-bottom: 16px;
  }

  .user-status .user-link {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 16px;
    border-radius: 12px;
    color: var(--typography-muted);
    text-decoration: none;
    font-size: 0.95rem;
    font-weight: 500;
    transition: all 0.2s ease;
    border: none;
    background: hsl(235 100% 60% / 0.1);
    border: 1px solid hsl(235 100% 60% / 0.2);
  }

  .user-status .user-link:hover {
    background: hsl(235 100% 60% / 0.15);
    border-color: hsl(235 100% 60% / 0.3);
    color: var(--typography-link);
  }

  .user-avatar {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    overflow: hidden;
    flex-shrink: 0;
  }

  .user-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%;
  }

  .logout-btn {
    margin-top: 0.5rem;
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 8px 16px;
    border-radius: 12px;
    color: var(--typography-muted);
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s ease;
    border: none;
    background: hsl(0 100% 50% / 0.1);
    border: 1px solid hsl(0 100% 50% / 0.2);
    cursor: pointer;
  }

  .logout-btn:hover {
    background: hsl(0 100% 50% / 0.15);
    border-color: hsl(0 100% 50% / 0.3);
    color: hsl(0 100% 70%);
  }

  .signin-btn {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 16px;
    border-radius: 12px;
    color: var(--typography-muted);
    text-decoration: none;
    font-size: 0.95rem;
    font-weight: 500;
    transition: all 0.2s ease;
    border: none;
    background: hsl(120 100% 50% / 0.1);
    border: 1px solid hsl(120 100% 50% / 0.2);
    cursor: pointer;
  }

  .signin-btn:hover {
    background: hsl(120 100% 50% / 0.15);
    border-color: hsl(120 100% 50% / 0.3);
    color: hsl(120 100% 70%);
  }

  .create-account-prompt {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .prompt-text {
    font-size: 0.875rem;
    color: var(--typography-subtle);
    font-weight: 500;
    margin: 0;
    text-align: center;
  }

  .nav-footer {
    padding: 24px 24px;
    margin-top: auto;
    border-top: 1px solid var(--color-border-subtle);
    flex-shrink: 0;
  }

  .social-links {
    display: flex;
    gap: 8px;
    justify-content: center;
    flex-wrap: wrap;
  }

  .social-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 10px;
    color: var(--typography-subtle);
    text-decoration: none;
    transition: all 0.2s ease;
  }

  .social-link:hover {
    background: var(--color-border-subtle);
    color: var(--typography-link);
  }

  /* Mobile adjustments */
  @media (max-width: 1024px) {
    .side-nav {
      width: 240px;
    }
  }

  @media (max-width: 768px) {
    .side-nav {
      display: none;
    }
  }
</style>

<script is:inline>
  // Handle logout functionality
  function handleLogout() {
    const logoutBtn = document.getElementById('logout-btn');
    if (!logoutBtn) return;

    logoutBtn.addEventListener('click', async () => {
      try {
        // Show loading state
        logoutBtn.innerHTML = `
          <i data-lucide="log-out"></i>
          <span>Signing out...</span>
        `;
        // Re-initialize Lucide icons for the new content
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        logoutBtn.disabled = true;

        // Wait for Clerk to be ready
        if (window.Clerk) {
          await window.Clerk.load();
          await window.Clerk.signOut();
          // Redirect to home after sign out
          window.location.href = '/';
        } else {
          // Fallback to redirect to sign-out endpoint
          window.location.href = '/sign-out';
        }
      } catch (error) {
        console.error('Logout error:', error);
        // Restore button state
        logoutBtn.innerHTML = `
          <i data-lucide="log-out"></i>
          <span>Sign Out</span>
        `;
        // Re-initialize Lucide icons for the new content
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        logoutBtn.disabled = false;

        // Fallback redirect
        window.location.href = '/sign-out';
      }
    });
  }

  // Handle sign-in functionality
  function handleSignIn() {
    const signinBtn = document.getElementById('signin-btn');
    if (!signinBtn) return;

    signinBtn.addEventListener('click', async () => {
      try {
        // Show loading state
        signinBtn.innerHTML = `
          <i data-lucide="log-in"></i>
          <span>Opening...</span>
        `;
        // Re-initialize Lucide icons for the new content
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        signinBtn.disabled = true;

        // Wait for Clerk to be ready and open sign-in modal
        if (window.Clerk) {
          await window.Clerk.load();

          window.Clerk.openSignIn({
            afterSignInUrl: '/app',  // Redirect to dashboard which will then redirect to user page
            afterSignUpUrl: '/onboarding',  // New users go through onboarding first
          });

          // Reset button after a short delay
          setTimeout(() => {
            signinBtn.innerHTML = `
              <i data-lucide="log-in"></i>
              <span>Sign In</span>
            `;
            // Re-initialize Lucide icons for the new content
            if (typeof lucide !== 'undefined') {
              lucide.createIcons();
            }
            signinBtn.disabled = false;
          }, 1500);
        } else {
          // Fallback to redirect to sign-in page
          window.location.href = '/sign-in';
        }
      } catch (error) {
        console.error('Sign-in error:', error);
        // Restore button state
        signinBtn.innerHTML = `
          <i data-lucide="log-in"></i>
          <span>Sign In</span>
        `;
        // Re-initialize Lucide icons for the new content
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        signinBtn.disabled = false;

        // Fallback redirect
        window.location.href = '/sign-in';
      }
    });
  }

  // Wait for Clerk to load, then initialize both logout and signin
  async function initializeAuth() {
    if (window.Clerk) {
      try {
        await window.Clerk.load();
      } catch (error) {
        console.log('Clerk not ready yet, using fallback');
      }
    }
    handleLogout();
    handleSignIn();

    // Initialize Lucide icons
    if (typeof lucide !== 'undefined') {
      lucide.createIcons();
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', initializeAuth);

  // Also try to initialize immediately in case DOMContentLoaded already fired
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAuth);
  } else {
    initializeAuth();
  }
</script>

<script is:inline>
  // Handle mobile navigation toggle if needed
  // This could be expanded later for mobile menu functionality
</script>