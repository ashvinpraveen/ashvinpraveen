---
import { SITE_TITLE } from '../consts';
import HeaderLink from './HeaderLink.astro';
import { Icon } from 'astro-icon/components';
import { ConvexHttpClient } from 'convex/browser';
import { api } from '../../convex/_generated/api';

export const prerender = false;

const user = await Astro.locals.currentUser();
const auth = Astro.locals.auth();

// Check if user is actually authenticated
const isAuthenticated = user && auth && auth.userId;
const preferredUsername = user?.username || user?.primaryEmailAddress?.emailAddress?.split('@')[0] || 'user';
let ownerSlug: string | null = null;

// Always resolve the authenticated user's current site slug from Convex
if (isAuthenticated) {
  try {
    const client = new ConvexHttpClient(import.meta.env.CONVEX_URL || import.meta.env.PUBLIC_CONVEX_URL);
    const sites = await client.query(api.sites.listSitesForClerk, { clerkUserId: user.id });
    ownerSlug = (Array.isArray(sites) && sites[0]?.slug) || null;
  } catch {}
}

// Detect if we're on a user page
const currentPath = Astro.url.pathname;
const pathParts = currentPath.split('/').filter(Boolean);
const mainSitePages = ['app', 'blog', 'about', 'onboarding', 'sign-in', 'sign-up'];
const isMainSitePage = currentPath === '/' || mainSitePages.some(page => currentPath.startsWith(`/${page}`));
const isUserPage = !isMainSitePage && pathParts.length > 0;

let currentUserSlug = null;
let isCurrentUserOwner = false;
let socialLinks: Array<{ platform: string; url: string }> = [];

if (isUserPage) {
  currentUserSlug = pathParts[0]; // /username/...

  if (isAuthenticated) {
    const fallbackSlug = user.username || user.primaryEmailAddress?.emailAddress?.split('@')[0] || '';
    const compareSlug = (ownerSlug || fallbackSlug || '').toLowerCase();
    isCurrentUserOwner = compareSlug === currentUserSlug?.toLowerCase();
  }
}

// Determine if the authenticated user is currently viewing their own page
const isViewingOwnPage = isUserPage && isCurrentUserOwner;

// Load social links for user page to show in footer
if (isUserPage && currentUserSlug) {
  try {
    const client = new ConvexHttpClient(import.meta.env.CONVEX_URL || import.meta.env.PUBLIC_CONVEX_URL);
    const profile = await client.query(api.profiles.getProfile, { siteSlug: currentUserSlug });
    const allowedOrder = [
      'linkedin','github','x','instagram','youtube','tiktok','threads','behance','medium','facebook','pinterest','twitch','spotify'
    ];
    const allowed = new Set(allowedOrder);
    socialLinks = (profile?.socialLinks || [])
      .filter((l: any) => allowed.has(l.platform) && typeof l.url === 'string' && l.url.trim().length > 0)
      .sort((a: any, b: any) => allowedOrder.indexOf(a.platform) - allowedOrder.indexOf(b.platform))
      .map((l: any) => ({ platform: l.platform, url: l.url }));
  } catch {}
}
---

<nav class="side-nav">
  <div class="nav-header">
    <div class="nav-title-row">
      {isUserPage && (
        <div class="user-profile-photo" id="user-profile-photo">
          <img
            src={user?.imageUrl || `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(user?.firstName || currentUserSlug || 'User')}`}
            alt={`${currentUserSlug}'s profile photo`}
            width="32"
            height="32"
          />
        </div>
      )}
      <h2>
        <a href={isUserPage ? `/${currentUserSlug}` : "/"}>
          {isUserPage ? `${currentUserSlug?.charAt(0).toUpperCase()}${currentUserSlug?.slice(1)}` : SITE_TITLE}
        </a>
      </h2>
    </div>
    {isUserPage && (
      <p class="nav-subtitle">
        <a href="/" class="back-to-main">‚Üê Back to {SITE_TITLE}</a>
      </p>
    )}
  </div>

  <div class="nav-links">
    {isUserPage ? (
      // User page navigation
      <>
        <HeaderLink href={`/${currentUserSlug}`} class="nav-link">
          <i data-lucide="home"></i>
          <span>Profile</span>
        </HeaderLink>

        <HeaderLink href={`/${currentUserSlug}/blog`} class="nav-link">
          <i data-lucide="file-text"></i>
          <span>Blog</span>
        </HeaderLink>

        <HeaderLink href={`/${currentUserSlug}/about`} class="nav-link">
          <i data-lucide="user"></i>
          <span>About</span>
        </HeaderLink>

        {isCurrentUserOwner && (
          <HeaderLink href={`/${currentUserSlug}/settings`} class="nav-link admin-link">
            <i data-lucide="settings"></i>
            <span>Settings</span>
          </HeaderLink>
        )}
      </>
    ) : (
      // Main site navigation
      <>
        <HeaderLink href="/" class="nav-link">
          <i data-lucide="home"></i>
          <span>Home</span>
        </HeaderLink>

        <HeaderLink href="/blog" class="nav-link">
          <i data-lucide="file-text"></i>
          <span>Blog</span>
        </HeaderLink>

        <HeaderLink href="/about" class="nav-link">
          <i data-lucide="user"></i>
          <span>About</span>
        </HeaderLink>

        {isAuthenticated && (
          <HeaderLink href={`/${ownerSlug || preferredUsername}/settings`} class="nav-link admin-link">
            <i data-lucide="settings"></i>
            <span>Settings</span>
          </HeaderLink>
        )}
      </>
    )}
  </div>
  
  <div class="user-status">
    {isAuthenticated ? (
      // Logged in user
      <>
        {!isViewingOwnPage && (
          <a href={`/${ownerSlug || preferredUsername}`} class="user-link">
            <div class="user-avatar">
              <img
                src={user.imageUrl || `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(user.firstName || ownerSlug || preferredUsername)}`}
                alt={`${user.firstName || ownerSlug || preferredUsername}'s avatar`}
                width="20"
                height="20"
              />
            </div>
            <span>View your page</span>
          </a>
        )}


        <button class="logout-btn" id="logout-btn">
          <i data-lucide="log-out"></i>
          <span>Sign Out</span>
        </button>
      </>
    ) : (
      // Logged out user - show different content for user pages vs main site
      isUserPage ? (
        <div class="create-account-prompt">
          <p class="prompt-text">Create your own page!</p>
          <button class="signin-btn nav-link" id="signin-btn">
            <i data-lucide="log-in"></i>
            <span>Sign In</span>
          </button>
        </div>
      ) : (
        <button class="signin-btn nav-link" id="signin-btn">
          <i data-lucide="log-in"></i>
          <span>Sign In</span>
        </button>
      )
    )}
  </div>

  <div class="nav-footer">
    <div class="social-links">
      {socialLinks.length > 0 && (
        socialLinks.map((l) => (
          <a href={l.url} aria-label={l.platform} class="social-link">
            <Icon name={`simple-icons:${l.platform === 'x' ? 'x' : l.platform}`} width="18" height="18" />
          </a>
        ))
      )}
    </div>
  </div>
</nav>

<!-- Profile Photo Upload Dialog -->
{isUserPage && isCurrentUserOwner && (
  <div id="profile-upload-dialog" class="upload-dialog-overlay hidden">
    <div class="upload-dialog">
      <div class="upload-dialog-header">
        <h3>Update Profile Photo</h3>
        <button id="close-upload-dialog" class="close-btn">
          <i data-lucide="x"></i>
        </button>
      </div>
      <div class="upload-dialog-content">
        <div class="current-photo">
          <img
            id="current-photo-preview"
            src={user?.imageUrl || `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(user?.firstName || currentUserSlug || 'User')}`}
            alt="Current profile photo"
          />
        </div>
        <div class="upload-section">
          <input type="file" id="photo-upload-input" accept="image/*" hidden />
          <button id="choose-photo-btn" class="upload-btn">
            <i data-lucide="upload"></i>
            Choose New Photo
          </button>
          <p class="upload-hint">JPG, PNG or GIF. Max 5MB.</p>
        </div>
        <div class="upload-actions">
          <button id="cancel-upload" class="cancel-btn">Cancel</button>
          <button id="save-photo" class="save-btn" disabled>Save Photo</button>
        </div>
      </div>
    </div>
  </div>
)}

<style>
  .side-nav {
    width: fit-content;
    min-height: 100%;
    background: hsl(0 0% 100% / 0.03);
    border-right: 1px solid var(--color-border-subtle);
    display: flex;
    flex-direction: column;
    padding: 24px 0;
    overflow: hidden;
    flex-shrink: 0;
    align-self: stretch;
  }

  .nav-header {
    padding: 0 24px;
    margin-bottom: 32px;
  }

  .nav-title-row {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .user-profile-photo {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.2s ease;
    flex-shrink: 0;
  }

  .user-profile-photo:hover {
    transform: scale(1.05);
  }

  .user-profile-photo img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%;
  }

  .nav-header h2 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--typography-heading-primary);
  }

  .nav-header h2 a {
    text-decoration: none;
    color: inherit;
  }

  .nav-subtitle {
    margin: 0.5rem 0 0 0;
    font-size: 0.8rem;
  }

  .back-to-main {
    color: var(--typography-subtle);
    text-decoration: none;
    font-weight: 400;
    transition: color 0.2s ease;
  }

  .back-to-main:hover {
    color: var(--typography-muted);
  }

  .nav-links {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 4px;
    padding: 0 16px;
    min-height: 0;
  }

  .nav-links :global(.nav-link) {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 16px;
    border-radius: 12px;
    color: var(--typography-muted);
    text-decoration: none;
    font-size: 0.95rem;
    font-weight: 500;
    transition: all 0.2s ease;
    border: none;
  }

  .nav-links :global(.nav-link:hover) {
    background: var(--color-border-subtle);
    color: var(--typography-link);
  }

  .nav-links :global(.nav-link.active) {
    background: var(--color-border);
    color: var(--typography-heading-primary);
  }

  .nav-links :global(.nav-link i[data-lucide]) {
    width: 20px;
    height: 20px;
    opacity: 0.8;
    transition: opacity 0.2s ease;
    /* Make nav icons thinner */
    stroke-width: 1.33px;
  }

  .nav-links :global(.nav-link:hover i[data-lucide]),
  .nav-links :global(.nav-link.active i[data-lucide]) {
    opacity: 1;
  }

  /* Ensure any Lucide icons within the side nav use 1pt stroke */
  .side-nav :global([data-lucide]) {
    stroke-width: 1.33px;
  }

  .user-status {
    padding: 0 16px 8px 16px;
    margin-bottom: 8px;
  }

  .user-status .user-link {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 10px 12px;
    border-radius: 10px;
    color: var(--typography-muted);
    text-decoration: none;
    font-size: 0.95rem;
    font-weight: 500;
    transition: background 0.2s ease, color 0.2s ease;
    width: 100%;
  }

  .user-status .user-link:hover {
    background: var(--color-border-subtle);
    color: var(--typography-link);
  }

  .user-avatar {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    overflow: hidden;
    flex-shrink: 0;
  }

  .user-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%;
  }

  .logout-btn {
    margin-top: 0;
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 10px 12px;
    border-radius: 10px;
    color: var(--typography-muted);
    font-size: 0.9rem;
    font-weight: 500;
    transition: background 0.2s ease, color 0.2s ease;
    border: none;
    background: transparent;
    cursor: pointer;
    width: 100%;
  }

  .logout-btn:hover {
    background: var(--color-border-subtle);
    color: var(--typography-link);
  }

  .signin-btn {
    margin-top: 0;
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 10px 12px;
    border-radius: 10px;
    color: var(--typography-muted);
    font-size: 0.9rem;
    font-weight: 500;
    transition: background 0.2s ease, color 0.2s ease;
    border: none;
    background: transparent;
    cursor: pointer;
    width: 100%;
    text-decoration: none;
  }

  .signin-btn:hover {
    background: var(--color-border-subtle);
    color: var(--typography-link);
  }

  .create-account-prompt {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .prompt-text {
    font-size: 0.875rem;
    color: var(--typography-subtle);
    font-weight: 500;
    margin: 0;
    text-align: center;
  }


  .nav-footer {
    padding: 0 16px;
    margin-top: auto;
    flex-shrink: 0;
  }

  .social-links {
    display: grid;
    grid-template-columns: repeat(4, 36px); /* cap at 4 icons per row */
    gap: 8px;
    justify-content: center; /* center the grid within the sidebar */
  }

  .social-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 10px;
    color: var(--typography-subtle);
    text-decoration: none;
    transition: all 0.2s ease;
  }

  .social-link:hover {
    background: var(--color-border-subtle);
    color: var(--typography-link);
  }

  /* Mobile adjustments */
  @media (max-width: 1024px) {
    .side-nav {
      width: 240px;
    }
  }

  /* Upload Dialog Styles */
  .upload-dialog-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: hsl(0 0% 0% / 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    backdrop-filter: blur(4px);
  }

  .upload-dialog-overlay.hidden {
    display: none;
  }

  .upload-dialog {
    background: hsl(0 0% 0% / 0.9);
    border: 1px solid hsl(0 0% 100% / 0.15);
    border-radius: 16px;
    width: 90%;
    max-width: 400px;
    max-height: 90vh;
    overflow: auto;
  }

  .upload-dialog-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    border-bottom: 1px solid hsl(0 0% 100% / 0.1);
  }

  .upload-dialog-header h3 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--typography-heading-primary);
  }

  .close-btn {
    background: none;
    border: none;
    color: var(--typography-muted);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 8px;
    transition: all 0.2s ease;
  }

  .close-btn:hover {
    background: hsl(0 0% 100% / 0.05);
    color: var(--typography-link);
  }

  .upload-dialog-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .current-photo {
    display: flex;
    justify-content: center;
  }

  .current-photo img {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid hsl(0 0% 100% / 0.1);
  }

  .upload-section {
    text-align: center;
  }

  .upload-btn {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 12px 24px;
    background: hsl(0 0% 100% / 0.08);
    border: 1px solid hsl(0 0% 100% / 0.15);
    border-radius: 10px;
    color: var(--typography-heading-primary);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .upload-btn:hover {
    background: hsl(0 0% 100% / 0.12);
    border-color: hsl(0 0% 100% / 0.25);
  }

  .upload-hint {
    margin: 0.75rem 0 0 0;
    font-size: 0.875rem;
    color: var(--typography-subtle);
  }

  .upload-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
  }

  .cancel-btn {
    padding: 10px 20px;
    background: none;
    border: 1px solid hsl(0 0% 100% / 0.15);
    border-radius: 8px;
    color: var(--typography-muted);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .cancel-btn:hover {
    background: hsl(0 0% 100% / 0.05);
    color: var(--typography-link);
  }

  .save-btn {
    padding: 10px 20px;
    background: hsl(142 71% 45%);
    border: none;
    border-radius: 8px;
    color: white;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .save-btn:hover:not(:disabled) {
    background: hsl(142 71% 50%);
  }

  .save-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  @media (max-width: 768px) {
    .side-nav {
      display: none;
    }

    .upload-dialog {
      width: 95%;
      margin: 1rem;
    }

    .upload-dialog-header,
    .upload-dialog-content {
      padding: 1rem;
    }
  }
</style>

<script is:inline>
  // Handle logout functionality
  function handleLogout() {
    const logoutBtn = document.getElementById('logout-btn');
    if (!logoutBtn) return;

    logoutBtn.addEventListener('click', async () => {
      try {
        // Show loading state
        logoutBtn.innerHTML = `
          <i data-lucide="log-out"></i>
          <span>Signing out...</span>
        `;
        // Re-initialize Lucide icons for the new content
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        logoutBtn.disabled = true;

        // Wait for Clerk to be ready
        if (window.Clerk) {
          await window.Clerk.load();
          await window.Clerk.signOut();
          // Redirect to home after sign out
          window.location.href = '/';
        } else {
          // Fallback to redirect to sign-out endpoint
          window.location.href = '/sign-out';
        }
      } catch (error) {
        console.error('Logout error:', error);
        // Restore button state
        logoutBtn.innerHTML = `
          <i data-lucide="log-out"></i>
          <span>Sign Out</span>
        `;
        // Re-initialize Lucide icons for the new content
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        logoutBtn.disabled = false;

        // Fallback redirect
        window.location.href = '/sign-out';
      }
    });
  }

  // Handle sign-in functionality
  function handleSignIn() {
    const signinBtn = document.getElementById('signin-btn');
    if (!signinBtn) return;

    signinBtn.addEventListener('click', async () => {
      try {
        // Show loading state
        signinBtn.innerHTML = `
          <i data-lucide="log-in"></i>
          <span>Opening...</span>
        `;
        // Re-initialize Lucide icons for the new content
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        signinBtn.disabled = true;

        // Wait for Clerk to be ready and open sign-in modal
        if (window.Clerk) {
          await window.Clerk.load();

          window.Clerk.openSignIn({
            afterSignInUrl: '/app',  // Redirect to app page which will redirect to user profile
            afterSignUpUrl: '/onboarding',  // New users go through onboarding first
          });

          // Reset button after a short delay
          setTimeout(() => {
            signinBtn.innerHTML = `
              <i data-lucide="log-in"></i>
              <span>Sign In</span>
            `;
            // Re-initialize Lucide icons for the new content
            if (typeof lucide !== 'undefined') {
              lucide.createIcons();
            }
            signinBtn.disabled = false;
          }, 1500);
        } else {
          // Fallback to redirect to sign-in page
          window.location.href = '/sign-in';
        }
      } catch (error) {
        console.error('Sign-in error:', error);
        // Restore button state
        signinBtn.innerHTML = `
          <i data-lucide="log-in"></i>
          <span>Sign In</span>
        `;
        // Re-initialize Lucide icons for the new content
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        signinBtn.disabled = false;

        // Fallback redirect
        window.location.href = '/sign-in';
      }
    });
  }

  // Wait for Clerk to load, then initialize both logout and signin
  async function initializeAuth() {
    if (window.Clerk) {
      try {
        await window.Clerk.load();
      } catch (error) {
        console.log('Clerk not ready yet, using fallback');
      }
    }
    handleLogout();
    handleSignIn();

    // Initialize Lucide icons
    if (typeof lucide !== 'undefined') {
      lucide.createIcons();
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', initializeAuth);

  // Also try to initialize immediately in case DOMContentLoaded already fired
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAuth);
  } else {
    initializeAuth();
  }
</script>

<script is:inline>
  // Profile Photo Upload Dialog Functionality
  function initializeUploadDialog() {
    const profilePhoto = document.getElementById('user-profile-photo');
    const uploadDialog = document.getElementById('profile-upload-dialog');
    const closeDialog = document.getElementById('close-upload-dialog');
    const cancelUpload = document.getElementById('cancel-upload');
    const choosePhotoBtn = document.getElementById('choose-photo-btn');
    const fileInput = document.getElementById('photo-upload-input');
    const savePhotoBtn = document.getElementById('save-photo');
    const currentPhotoPreview = document.getElementById('current-photo-preview');

    if (!profilePhoto || !uploadDialog) return;

    let selectedFile = null;

    // Open dialog when profile photo is clicked
    profilePhoto?.addEventListener('click', () => {
      uploadDialog.classList.remove('hidden');
      // Initialize Lucide icons for dialog content
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    });

    // Close dialog
    function closeUploadDialog() {
      uploadDialog.classList.add('hidden');
      selectedFile = null;
      savePhotoBtn.disabled = true;
      if (fileInput) fileInput.value = '';
    }

    closeDialog?.addEventListener('click', closeUploadDialog);
    cancelUpload?.addEventListener('click', closeUploadDialog);

    // Close dialog when clicking overlay
    uploadDialog?.addEventListener('click', (e) => {
      if (e.target === uploadDialog) {
        closeUploadDialog();
      }
    });

    // Handle file selection
    choosePhotoBtn?.addEventListener('click', () => {
      fileInput?.click();
    });

    fileInput?.addEventListener('change', (e) => {
      const file = e.target.files?.[0];
      if (file) {
        // Validate file size (5MB limit)
        if (file.size > 5 * 1024 * 1024) {
          alert('File size must be less than 5MB');
          fileInput.value = '';
          return;
        }

        // Validate file type
        if (!file.type.match(/^image\/(jpeg|jpg|png|gif)$/)) {
          alert('Please select a valid image file (JPG, PNG, or GIF)');
          fileInput.value = '';
          return;
        }

        selectedFile = file;
        savePhotoBtn.disabled = false;

        // Preview the selected image
        const reader = new FileReader();
        reader.onload = (e) => {
          if (currentPhotoPreview) {
            currentPhotoPreview.src = e.target.result;
          }
        };
        reader.readAsDataURL(file);
      }
    });

    // Handle photo save (placeholder - would need backend implementation)
    savePhotoBtn?.addEventListener('click', async () => {
      if (!selectedFile) return;

      savePhotoBtn.disabled = true;
      savePhotoBtn.textContent = 'Uploading...';

      try {
        // This would be implemented with actual backend upload logic
        // For now, just show a message
        alert('Photo upload functionality would be implemented here!\n\nThis would:\n1. Upload the file to your storage\n2. Update your Clerk profile\n3. Refresh the page to show the new photo');

        closeUploadDialog();
      } catch (error) {
        alert('Failed to upload photo. Please try again.');
      } finally {
        savePhotoBtn.disabled = false;
        savePhotoBtn.textContent = 'Save Photo';
      }
    });
  }

  // Initialize upload dialog when DOM is ready
  document.addEventListener('DOMContentLoaded', initializeUploadDialog);

  // Also try to initialize immediately in case DOMContentLoaded already fired
  if (document.readyState !== 'loading') {
    initializeUploadDialog();
  }
</script>


<script is:inline>
  // Handle mobile navigation toggle if needed
  // This could be expanded later for mobile menu functionality
</script>
