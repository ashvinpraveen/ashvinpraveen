---
import BaseHead from '../../components/BaseHead.astro';
import CardLayout from '../../components/CardLayout.astro';
import GlobalEditToggle from '../../components/GlobalEditToggle.astro';
import BlogList from '../../components/BlogList.astro';
import EnhancedTipTapEditor from '../../components/EnhancedTipTapEditor.astro';
import ConvexProviderWrapper from '../../components/ConvexProviderWrapper.tsx';
import { ConvexHttpClient } from 'convex/browser';
import { api } from '../../../convex/_generated/api';
export const prerender = false;

const { slug } = Astro.params;
if (!slug) {
  return new Response('Not found', { status: 404 });
}
const user = await Astro.locals.currentUser();

// Resolve slug for alias redirects
let actualSlug = slug;
let isOwner = false;
try {
  const client = new ConvexHttpClient(import.meta.env.CONVEX_URL || import.meta.env.PUBLIC_CONVEX_URL);
  const resolved = await client.query(api.sites.resolveSlug, { slug });
  if (resolved?.redirect && resolved?.canonicalSlug) {
    return Astro.redirect(`/${resolved.canonicalSlug}/blog`);
  }
  actualSlug = resolved?.canonicalSlug || slug;
  if (user?.id) {
    const sites = await client.query(api.sites.listSitesForClerk, { clerkUserId: user.id });
    const canonical = actualSlug.toLowerCase();
    isOwner = Array.isArray(sites) && sites.some((s: any) => (s?.slug || '').toLowerCase() === canonical);
    // Debug logging
    console.log('Blog ownership check:', {
      userId: user.id,
      username: user.username,
      slug: slug,
      actualSlug: actualSlug,
      canonical: canonical,
      sites: sites?.map(s => s.slug),
      isOwner: isOwner
    });
  }
} catch (error) {
  console.log('Blog ownership check error:', error);
}

const pageTitle = `${actualSlug}'s Blog`;
const pageDescription = `Blog posts by ${actualSlug}`;

// Default content for blog header
const defaultBlogHeader = '<h1>Blog</h1><p>Here\'s a collection of some thoughts and notes to self</p>';
---

<!doctype html>
<html lang="en" data-theme="dark">
	<head>
		<BaseHead title={pageTitle} description={pageDescription} isUserPage={true} />
		<script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
	</head>
	<body data-is-owner={isOwner} data-slug={slug}>
		<CardLayout>
			<main>
				<!-- Editable Blog Header -->
				<div class="blog-header-container">
					<EnhancedTipTapEditor
						id="blog-header-editor"
						placeholder={isOwner ? 'Write your blog header...' : 'No blog header yet.'}
						content={defaultBlogHeader}
						editable={false}
						showBubbleMenu={false}
						showContextMenu={true}
						showUploadModal={false}
						isOwner={isOwner}
						slug={slug}
						pageKey="blog-header"
						class="blog-header-editor"
					/>
				</div>

				<!-- Blog Posts List -->
				<BlogList slug={actualSlug} isOwner={isOwner} />

		<!-- Floating New Post Button -->
		{isOwner && (
			<button class="floating-new-post-btn" id="new-post-btn">
				<i data-lucide="plus"></i>
			</button>
		)}
			</main>
		</CardLayout>

		<GlobalEditToggle isOwner={isOwner} />

		<!-- Convex Provider Wrapper for Blog Header -->
		<ConvexProviderWrapper
			slug={slug}
			editorId="blog-header-editor"
			isOwner={isOwner}
			pageKey="blog-header"
			pageTitle="Blog Header"
			client:load
		/>

		<style>
			/* Remove main container padding since TipTap has its own */
			:global(.content-area) main {
				padding: 0 !important;
			}

			.content-area main {
				padding: 0 !important;
			}

			main {
				padding: 0 !important;
			}

			/* Blog Header Container - remove min-height from TipTap */
			.blog-header-container {
				margin-bottom: 0;
			}

			.blog-header-editor {
				width: 100%;
			}

			/* Override TipTap min-height and padding for header with maximum specificity */
			:global(div.blog-header-container div.blog-header-editor.enhanced-tiptap-editor) {
				min-height: 0rem !important;
				padding: 3rem 3rem 0rem 3rem !important;
				margin: 0 0 2rem 0 !important;
			}

			:global(div.blog-header-container div.blog-header-editor.enhanced-tiptap-editor .ProseMirror) {
				min-height: 0rem !important;
				padding-bottom: 0rem !important;
			}

			:global(#blog-header-editor) {
				min-height: 0rem !important;
				padding: 3rem 3rem 0rem 3rem !important;
				margin: 0 0 2rem 0 !important;
			}

			:global(#blog-header-editor .ProseMirror) {
				min-height: 0rem !important;
				padding-bottom: 0rem !important;
			}

			/* Add padding to blog list container */
			:global(.posts-container) {
				padding: 0 3rem 3rem 3rem;
			}

			/* Floating New Post Button */
			.floating-new-post-btn {
				position: fixed;
				bottom: 2rem;
				right: 2rem;
				width: 56px;
				height: 56px;
				background: hsl(0 0% 100% / 0.05);
				backdrop-filter: blur(20px);
				border: 1px solid hsl(0 0% 100% / 0.15);
				border-radius: 50%;
				color: hsl(0 0% 100% / 0.8);
				cursor: pointer;
				transition: all 0.2s ease;
				display: flex;
				align-items: center;
				justify-content: center;
				z-index: 1000;
			}

			.floating-new-post-btn:hover {
				background: hsl(0 0% 100% / 0.1);
				color: hsl(0 0% 100% / 0.95);
			}

			.floating-new-post-btn i {
				width: 20px;
				height: 20px;
				stroke-width: 1;
			}

			/* Responsive */
			@media (max-width: 768px) {
				/* Blog list responsive padding */
				:global(.posts-container) {
					padding: 0 2rem 2rem 2rem;
				}

				.floating-new-post-btn {
					bottom: 1.5rem;
					right: 1.5rem;
					width: 50px;
					height: 50px;
				}
			}
		</style>

		<script type="module" is:inline>
			// Initialize Lucide icons
			if (typeof lucide !== 'undefined') {
				lucide.createIcons();
			}

			// Get data from body attributes
			const isOwner = document.body.dataset.isOwner === 'true';
			const slug = document.body.dataset.slug;

			// Generate unique ID for new posts
			function generateUniqueId() {
				return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
			}

			// Create new post handler for floating button
			function handleNewPost() {
				if (!isOwner) return;
				const postId = generateUniqueId();
				window.location.href = `/${slug}/blog/${postId}`;
			}

			// Event listeners
			document.addEventListener('DOMContentLoaded', function() {
				// New post button (floating)
				document.getElementById('new-post-btn')?.addEventListener('click', handleNewPost);

				// Listen for global edit mode changes for blog header
				window.addEventListener('editModeChanged', function(e) {
					const editMode = e.detail.isEditMode;
					const editorInstance = window[`blog-header-editorEditor`];
					if (editorInstance && editorInstance.getEditor()) {
						editorInstance.setEditable(isOwner && editMode);
					}
				});

				// Set initial edit mode based on saved state for blog header
				const savedMode = localStorage.getItem('editMode') === 'true';
				if (savedMode && isOwner) {
					window.dispatchEvent(new CustomEvent('editModeChanged', {
						detail: { isEditMode: true }
					}));
				}

				// Initialize Lucide icons
				if (typeof lucide !== 'undefined') {
					lucide.createIcons();
				}
			});
		</script>
	</body>
</html>
