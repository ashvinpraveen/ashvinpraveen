---
import BaseHead from '../../components/BaseHead.astro';
import CardLayout from '../../components/CardLayout.astro';
import { Icon } from 'astro-icon/components';
import { ConvexHttpClient } from 'convex/browser';
import { api } from '../../../convex/_generated/api';
export const prerender = false;

const { slug } = Astro.params;
const user = await Astro.locals.currentUser();

if (!user) {
  return Astro.redirect('/sign-in');
}

// Resolve canonical site slug from Convex (source of truth)
let siteSlug = (user.username || user.primaryEmailAddress?.emailAddress?.split('@')[0] || 'user').toLowerCase();
let siteSettings: any = null;
try {
  const client = new ConvexHttpClient(import.meta.env.CONVEX_URL || import.meta.env.PUBLIC_CONVEX_URL);
  const sites = await client.query(api.sites.listSitesForClerk, { clerkUserId: user.id });
  const site = Array.isArray(sites) && sites[0] || null;
  if (site) {
    siteSlug = site.slug;
    siteSettings = await client.query(api.sites.getSettings, { slug: site.slug });
  }
} catch {}

// If route param doesn't match canonical slug, redirect
if ((slug || '').toLowerCase() !== siteSlug.toLowerCase()) {
  return Astro.redirect(`/${siteSlug}/settings`);
}

const siteLink = `/${siteSlug}`;
const userFirst = user.firstName || '';
const userLast = user.lastName || '';
---

<html lang="en" data-theme="dark">
  <head>
    <BaseHead title="Settings" description="Manage your site settings" isUserPage={true} />
  </head>
  <body>
    <CardLayout>
      <main class="settings-main">
        <div class="dashboard-header">
          <h1>Settings</h1>
          <p class="welcome-text">Welcome back, {user.firstName ?? user.username ?? user.emailAddresses?.[0]?.emailAddress?.split('@')[0]}</p>
        </div>

        <div id="settings" class="settings">
          <form id="settings-form" method="post" action="/api/settings/update">
            <input type="hidden" name="slug" value={siteSlug} />

            <!-- Your Site -->
            <div class="section-card">
              <div class="section-header">
                <h2 class="section-title">Your Site</h2>
                <div class="section-actions">
                  <button type="submit" id="save-site" class="save">Save</button>
                  <span id="site-status" class="status" aria-live="polite"></span>
                </div>
              </div>
              <div class="site-stack">
              <label>
                <span>Site Name</span>
                <input type="text" name="name" placeholder="My Site" value={siteSettings?.name || undefined} />
              </label>
              <label>
                <span>Username (URL)</span>
                <div class="username-row">
                  <span class="prefix">/</span>
                  <input type="text" id="usernameInput" placeholder="your-handle" value={siteSlug} />
                  <button type="button" id="usernameSave" class="btn-small">Change URL</button>
                </div>
                <small id="usernameHelp" class="hint"></small>
              </label>
              <!-- Custom Domain moved to dedicated section below -->
              </div>
            </div>

            

            <!-- Socials -->
            <div class="section-card">
              <div class="section-header">
                <h2 class="section-title">Socials</h2>
                <div class="section-actions">
                  <button type="button" id="save-socials" class="save">Save</button>
                  <span id="socials-status" class="status" aria-live="polite"></span>
                </div>
              </div>
              <div class="socials-grid">
              <!-- Sorted by typical portfolio popularity: LinkedIn, GitHub, X, Instagram, YouTube, TikTok, Threads, Behance, Medium, Facebook, Pinterest, Twitch, Spotify -->
              <div class="social-row" data-platform="linkedin">
                <span class="icon"><Icon name="simple-icons:linkedin" width="18" height="18" /></span>
                <input type="text" id="social-linkedin" value="https://linkedin.com/in/" />
              </div>
              <div class="social-row" data-platform="github">
                <span class="icon"><Icon name="simple-icons:github" width="18" height="18" /></span>
                <input type="text" id="social-github" value="https://github.com/" />
              </div>
              <div class="social-row" data-platform="x">
                <span class="icon"><Icon name="simple-icons:x" width="18" height="18" /></span>
                <input type="text" id="social-x" value="https://x.com/" />
              </div>
              <div class="social-row" data-platform="instagram">
                <span class="icon"><Icon name="simple-icons:instagram" width="18" height="18" /></span>
                <input type="text" id="social-instagram" value="https://instagram.com/" />
              </div>
              <div class="social-row" data-platform="youtube">
                <span class="icon"><Icon name="simple-icons:youtube" width="18" height="18" /></span>
                <input type="text" id="social-youtube" value="https://youtube.com/@" />
              </div>
              <div class="social-row" data-platform="tiktok">
                <span class="icon"><Icon name="simple-icons:tiktok" width="18" height="18" /></span>
                <input type="text" id="social-tiktok" value="https://tiktok.com/@" />
              </div>
              <div class="social-row" data-platform="threads">
                <span class="icon"><Icon name="simple-icons:threads" width="18" height="18" /></span>
                <input type="text" id="social-threads" value="https://threads.net/" />
              </div>
              <div class="social-row" data-platform="behance">
                <span class="icon"><Icon name="simple-icons:behance" width="18" height="18" /></span>
                <input type="text" id="social-behance" value="https://behance.net/" />
              </div>
              <div class="social-row" data-platform="medium">
                <span class="icon"><Icon name="simple-icons:medium" width="18" height="18" /></span>
                <input type="text" id="social-medium" value="https://medium.com/@" />
              </div>
              
              <div class="social-row" data-platform="facebook">
                <span class="icon"><Icon name="simple-icons:facebook" width="18" height="18" /></span>
                <input type="text" id="social-facebook" value="https://facebook.com/" />
              </div>
              
              <div class="social-row" data-platform="pinterest">
                <span class="icon"><Icon name="simple-icons:pinterest" width="18" height="18" /></span>
                <input type="text" id="social-pinterest" value="https://pinterest.com/" />
              </div>
              
              <div class="social-row" data-platform="twitch">
                <span class="icon"><Icon name="simple-icons:twitch" width="18" height="18" /></span>
                <input type="text" id="social-twitch" value="https://twitch.tv/" />
              </div>
              <div class="social-row" data-platform="spotify">
                <span class="icon"><Icon name="simple-icons:spotify" width="18" height="18" /></span>
                <input type="text" id="social-spotify" value="https://open.spotify.com/user/" />
              </div>
              </div>
            </div>

            

            <!-- Personalisation -->
            <div class="section-card">
              <div class="section-header">
                <h2 class="section-title">Personalisation</h2>
                <div class="section-actions">
                  <button type="submit" id="save-appearance" class="save">Save</button>
                  <span id="appearance-status" class="status" aria-live="polite"></span>
                </div>
              </div>
              <div class="grid">
              <label>
                <span>Theme</span>
                <select name="themeMode" id="themeMode" value={siteSettings?.themeMode || 'dark'}>
                  <option value="dark">Dark</option>
                  <option value="light">Light</option>
                </select>
              </label>
              <label>
                <span>Background</span>
                <input type="color" name="backgroundColor" id="backgroundColor" value={siteSettings?.backgroundColor || '#000000'} />
              </label>
              <label>
                <span>Body Font</span>
                <select name="fontBody" id="fontBody" value={siteSettings?.fontBody || 'Inter, system-ui, sans-serif'}>
                  <option value="Inter, system-ui, sans-serif">Inter</option>
                  <option value="system-ui, sans-serif">System Sans</option>
                  <option value="Georgia, serif">Georgia</option>
                  <option value="'JetBrains Mono', monospace">JetBrains Mono</option>
                </select>
              </label>
              <label>
                <span>Heading Font</span>
                <select name="fontHeading" id="fontHeading" value={siteSettings?.fontHeading || "'Geist Sans', system-ui, sans-serif"}>
                  <option value="'Geist Sans', system-ui, sans-serif">Geist Sans</option>
                  <option value="Inter, system-ui, sans-serif">Inter</option>
                  <option value="system-ui, sans-serif">System Sans</option>
                  <option value="Georgia, serif">Georgia</option>
                </select>
              </label>
              </div>
            </div>

            <!-- SEO settings -->
            <div class="section-card">
              <div class="section-header">
                <h2 class="section-title">SEO settings</h2>
                <div class="section-actions">
                  <button type="submit" id="save-seo" class="save">Save</button>
                  <span id="seo-status" class="status" aria-live="polite"></span>
                </div>
              </div>
              <div class="grid">
              <label class="full">
                <span>SEO Title</span>
                <input type="text" name="seoTitle" placeholder="Title for search engines" value={siteSettings?.seoTitle || undefined} />
              </label>
              <label class="full">
                <span>SEO Description</span>
                <textarea name="seoDescription" rows="2" placeholder="Short description for search/social">{siteSettings?.seoDescription || ''}</textarea>
              </label>
              <p class="note">Social sharing image is auto-generated for your site.</p>
              </div>
            </div>

            <!-- Custom Domain (moved to bottom) -->
            <div class="section-card">
              <div class="section-header">
                <h2 class="section-title">Custom Domain</h2>
                <div class="section-actions">
                  <button type="button" id="domain-manage" class="save">Manage</button>
                </div>
              </div>
              <div class="site-stack">
                <!-- Summary row (collapsed) -->
                {siteSettings?.customDomain ? (
                  <div class="domain-summary">
                    <span class="label">URL</span>
                    <a id="domain-link" class="link" href={`https://${siteSettings.customDomain}`} target="_blank" rel="noopener">https://{siteSettings.customDomain}</a>
                    <span class="status-pill" id="domain-summary-status">{siteSettings?.domainStatus || 'pending'}</span>
                  </div>
                ) : (
                  <button type="button" id="domain-start" class="start-link">+ Connect a domain you own</button>
                )}

                <!-- Details (progressive disclosure) -->
                <div id="domain-details" class="domain-details {siteSettings?.customDomain ? 'hidden' : ''}">
                  <label>
                    <span>Domain</span>
                    <input type="text" id="customDomainInput" placeholder="example.com or www.example.com" value={siteSettings?.customDomain || ''} />
                  </label>
                  <div class="domain-controls">
                    <button type="button" id="domain-save" class="save">Save</button>
                    <button type="button" id="domain-check" class="save">Check DNS</button>
                    <button type="button" id="domain-connect" class="save">Connect to Netlify</button>
                  </div>
                <div class="domain-instructions">
                  <p class="note">Add these DNS records at your domain provider, then click Check DNS:</p>
                  <div class="records">
                    <code>TXT</code>
                    <code id="txtName">_ap-site-verification.{siteSettings?.customDomain || 'yourdomain.com'}</code>
                    <code id="txtValue">{siteSettings?.domainVerificationToken || 'will-be-generated-on-save'}</code>
                  </div>
                  <div class="records">
                    <code>CNAME</code>
                    <code>www</code>
                    <code id="cnameTarget">{import.meta.env.PUBLIC_NETLIFY_CNAME_TARGET || 'your-app-host.example.com'}</code>
                  </div>
                </div>
                  <div class="domain-status" id="domain-status"></div>
                </div>
              </div>
            </div>
          </form>
        </div>
      </main>
    </CardLayout>

    <script is:inline define:vars={{ siteSlug, userFirst, userLast, hasDomain: Boolean(siteSettings?.customDomain), currentDomain: siteSettings?.customDomain || '', domainStatus: siteSettings?.domainStatus || 'none', cnameTarget: import.meta.env.PUBLIC_NETLIFY_CNAME_TARGET || '' }}>
      const form = document.getElementById('settings-form');
      const siteStatus = document.getElementById('site-status');
      const seoStatus = document.getElementById('seo-status');
      const appearanceStatus = document.getElementById('appearance-status');
      let currentSlugVar = siteSlug;
      const usernameInput = document.getElementById('usernameInput');
      const usernameHelp = document.getElementById('usernameHelp');
      const usernameSave = document.getElementById('usernameSave');
      const domainInput = document.getElementById('customDomainInput');
      const domainSave = document.getElementById('domain-save');
      const domainCheck = document.getElementById('domain-check');
      // No explicit connect button; we connect automatically after verification
      const domainStatus = document.getElementById('domain-status');
      const domainDetails = document.getElementById('domain-details');
      const domainStart = document.getElementById('domain-start');
      const domainManage = document.getElementById('domain-manage');
      const domainLink = document.getElementById('domain-link');
      const domainSummaryStatus = document.getElementById('domain-summary-status');

      async function loadSettings() {
        try {
          const res = await fetch(`/api/settings/get?slug=${encodeURIComponent(currentSlugVar)}`);
          const data = await res.json();
          const s = data?.settings || {};
          for (const [k,v] of Object.entries(s)) {
            const el = form && form.elements && form.elements.namedItem ? form.elements.namedItem(k) : null;
          if (el && typeof v === 'string') el.value = v;
          }
          // Default Site Name if missing
          const nameEl = form?.elements?.namedItem && form.elements.namedItem('name');
          const defaultName = [userFirst, userLast].filter(Boolean).join(' ');
          if (nameEl && 'value' in nameEl) {
            const current = String(nameEl.value || '').trim();
            if (!current) {
              nameEl.value = defaultName ? `${defaultName}'s Personal Website` : "My Personal Website";
            }
          }

          // Default SEO Title & Description if missing
          const seoTitleEl = form?.elements?.namedItem && form.elements.namedItem('seoTitle');
          const seoDescEl = form?.elements?.namedItem && form.elements.namedItem('seoDescription');
          const displayName = (s?.title && typeof s.title === 'string' && s.title.trim()) || (defaultName || '').trim() || currentSlugVar;

          if (seoTitleEl && 'value' in seoTitleEl) {
            const curSeoTitle = String(seoTitleEl.value || '').trim();
            if (!curSeoTitle) {
              seoTitleEl.value = displayName ? `${displayName} — Personal Website & Blog` : 'Personal Website & Blog';
            }
          }
          if (seoDescEl && 'value' in seoDescEl) {
            const curSeoDesc = String(seoDescEl.value || '').trim();
            if (!curSeoDesc) {
              const base = (typeof s.bio === 'string' && s.bio.trim())
                ? s.bio.trim()
                : displayName ? `Explore ${displayName}'s projects, writing, and links.` : 'Explore personal projects, writing, and links.';
              // Trim to ~160 chars for meta description
              seoDescEl.value = base.length > 160 ? base.slice(0,157) + '…' : base;
            }
          }
          if (typeof s.slug === 'string' && s.slug) {
            currentSlugVar = s.slug;
            const hiddenSlug = form?.elements?.namedItem && form.elements.namedItem('slug');
            if (hiddenSlug && 'value' in hiddenSlug) hiddenSlug.value = currentSlugVar;
          }
          if (usernameInput) usernameInput.value = currentSlugVar;
          applyAppearance();
          await loadSocial();
        } catch {}
      }

      function applyAppearance() {
        const themeMode = document.getElementById('themeMode')?.value || 'dark';
        const bgc = document.getElementById('backgroundColor')?.value;
        const fontBody = document.getElementById('fontBody')?.value;
        const fontHeading = document.getElementById('fontHeading')?.value;
        const root = document.documentElement;
        root.setAttribute('data-theme', themeMode);
        root.style.setProperty('--font-family-body', fontBody);
        root.style.setProperty('--font-family-heading', fontHeading);
        document.body.style.backgroundColor = bgc || 'transparent';
      }

      document.getElementById('themeMode')?.addEventListener('change', applyAppearance);
      document.getElementById('backgroundColor')?.addEventListener('input', applyAppearance);
      document.getElementById('fontBody')?.addEventListener('change', applyAppearance);
      document.getElementById('fontHeading')?.addEventListener('change', applyAppearance);

      // Username availability check (debounced)
      let checkTimer;
      function setHelp(text, ok) {
        if (!usernameHelp) return;
        usernameHelp.textContent = text || '';
        usernameHelp.style.color = ok ? 'hsl(150 70% 60%)' : 'hsl(0 70% 70%)';
      }
      function normSlug(s) { return (s||'').trim().toLowerCase(); }
      usernameInput?.addEventListener('input', () => {
        clearTimeout(checkTimer);
        const val = normSlug(usernameInput.value);
        if (!val) { setHelp('', true); return; }
        checkTimer = setTimeout(async () => {
          try {
            const res = await fetch(`/api/sites/checkSlug?slug=${encodeURIComponent(val)}`);
            const json = await res.json();
            if (json.available) setHelp('Available', true);
            else setHelp(json.reason || 'Not available', false);
          } catch { setHelp('Check failed', false); }
        }, 300);
      });

      usernameSave?.addEventListener('click', async () => {
        const target = normSlug(usernameInput?.value || '');
        if (!target || target === currentSlugVar) { setHelp('No change', false); return; }
        setHelp('Updating…', true);
        try {
          const res = await fetch('/api/sites/changeSlug', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ newSlug: target }) });
          const json = await res.json();
          if (res.ok && json?.ok) {
            window.location.href = `/${target}/settings`;
          } else {
            setHelp(json?.error || 'Failed to update', false);
          }
        } catch (e) {
          setHelp('Failed to update', false);
        }
      });

      // Domain management
      function setPill(status) {
        if (!domainSummaryStatus) return;
        const el = domainSummaryStatus;
        el.classList.remove('pill-pending','pill-verified','pill-live','pill-error');
        let label = 'Pending';
        if (status === 'pending_dns' || status === 'none') { el.classList.add('pill-pending'); label = 'Pending'; }
        else if (status === 'verified') { el.classList.add('pill-verified'); label = 'Verified'; }
        else if (status === 'live') { el.classList.add('pill-live'); label = 'Live'; }
        else if (status === 'error') { el.classList.add('pill-error'); label = 'Error'; }
        el.textContent = label;
      }

      // Initialize pill
      setPill(domainStatus);

      // Hide details by default; user reveals via start/manage
      if (domainDetails) domainDetails.classList.add('hidden');

      domainStart?.addEventListener('click', () => {
        domainDetails?.classList.remove('hidden');
        (domainInput as HTMLInputElement | null)?.focus();
      });
      domainManage?.addEventListener('click', () => {
        domainDetails?.classList.toggle('hidden');
      });
      domainSave?.addEventListener('click', async () => {
        const domain = (domainInput as HTMLInputElement | null)?.value?.trim();
        if (!domain) { if (domainStatus) domainStatus.textContent = 'Enter a domain'; return; }
        if (domainStatus) domainStatus.textContent = 'Saving…';
        try {
          const res = await fetch('/api/domains/set', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ slug: currentSlugVar, domain }) });
          const json = await res.json();
          if (res.ok && json?.ok) {
            (document.getElementById('txtName') as HTMLElement).textContent = `_ap-site-verification.${domain}`;
            (document.getElementById('txtValue') as HTMLElement).textContent = json.token || 'token';
            if (document.getElementById('cnameTarget')) (document.getElementById('cnameTarget') as HTMLElement).textContent = cnameTarget || json.cnameTarget || '';
            if (domainStatus) domainStatus.textContent = 'Saved. Add DNS records then click Check DNS';
            if (domainLink) {
              domainLink.textContent = `https://${domain}`;
              (domainLink as HTMLAnchorElement).href = `https://${domain}`;
            }
            setPill('pending_dns');
          } else {
            if (domainStatus) domainStatus.textContent = json?.error || 'Failed to save domain';
          }
        } catch { if (domainStatus) domainStatus.textContent = 'Failed to save domain'; }
      });

      domainCheck?.addEventListener('click', async () => {
        const domain = (domainInput as HTMLInputElement | null)?.value?.trim();
        if (!domain) { if (domainStatus) domainStatus.textContent = 'Enter a domain'; return; }
        if (domainStatus) domainStatus.textContent = 'Checking DNS…';
        try {
          const res = await fetch(`/api/domains/check?domain=${encodeURIComponent(domain)}&slug=${encodeURIComponent(currentSlugVar)}`);
          const json = await res.json();
          if (json.ok) {
            // Auto-connect behind the scenes
            try {
              const conn = await fetch('/api/domains/connect', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ slug: currentSlugVar, domain }) });
              if (conn.ok) {
                if (domainStatus) domainStatus.textContent = 'Verified and running ✔';
                setPill('live');
              } else {
                if (domainStatus) domainStatus.textContent = 'Verified — finishing setup…';
                setPill('verified');
              }
            } catch {
              if (domainStatus) domainStatus.textContent = 'Verified — finishing setup…';
              setPill('verified');
            }
          } else {
            const bits: string[] = [];
            if (!json.hasTxt) bits.push('TXT missing');
            if (!json.hasCname) bits.push('CNAME missing');
            if (domainStatus) domainStatus.textContent = `Domain not verified: ${bits.join(', ')}. Add the records above and click Check again.`;
            setPill('pending_dns');
          }
        } catch { if (domainStatus) domainStatus.textContent = 'Check failed'; }
      });

      // OG image is auto-generated; removed manual upload UI.

      const SOCIAL_PLATFORMS = [
        { key: 'linkedin',     prefix: 'https://linkedin.com/in/',         inputId: 'social-linkedin' },
        { key: 'github',       prefix: 'https://github.com/',              inputId: 'social-github' },
        { key: 'x',            prefix: 'https://x.com/',                   inputId: 'social-x' },
        { key: 'instagram',    prefix: 'https://instagram.com/',           inputId: 'social-instagram' },
        { key: 'youtube',      prefix: 'https://youtube.com/@',            inputId: 'social-youtube' },
        { key: 'tiktok',       prefix: 'https://tiktok.com/@',             inputId: 'social-tiktok' },
        { key: 'threads',      prefix: 'https://threads.net/',             inputId: 'social-threads' },
        { key: 'behance',      prefix: 'https://behance.net/',             inputId: 'social-behance' },
        { key: 'medium',       prefix: 'https://medium.com/@',             inputId: 'social-medium' },
        { key: 'facebook',     prefix: 'https://facebook.com/',            inputId: 'social-facebook' },
        { key: 'pinterest',    prefix: 'https://pinterest.com/',           inputId: 'social-pinterest' },
        { key: 'twitch',       prefix: 'https://twitch.tv/',               inputId: 'social-twitch' },
        { key: 'spotify',      prefix: 'https://open.spotify.com/user/',   inputId: 'social-spotify' },
      ];

      const existingLinks = {};

      async function loadSocial() {
        try {
          const res = await fetch(`/api/profile/get?slug=${encodeURIComponent(currentSlugVar)}`);
          if (!res.ok) return;
          const data = await res.json();
          const links = data?.socialLinks || [];
          // Map existing links by platform
          for (const l of links) {
            existingLinks[l.platform] = { id: l._id, url: l.url };
          }

          // Populate inputs with full URLs (or prefix as prefill)
          for (const p of SOCIAL_PLATFORMS) {
            const el = document.getElementById(p.inputId);
            if (!(el instanceof HTMLInputElement)) continue;
            const link = existingLinks[p.key];
            if (link && typeof link.url === 'string') {
              el.value = link.url;
            } else {
              el.value = p.prefix;
            }
          }
          // Other socials UI removed
        } catch {}
      }

// other socials UI removed

      async function refreshSideNavSocials() {
        try {
          const res = await fetch(location.pathname, { credentials: 'same-origin' });
          if (!res.ok) return;
          const html = await res.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const fresh = doc.querySelector('.side-nav .social-links');
          const target = document.querySelector('.side-nav .social-links');
          if (fresh && target) {
            target.innerHTML = fresh.innerHTML;
          }
        } catch {}
      }

      document.getElementById('save-socials')?.addEventListener('click', async () => {
        const status = document.getElementById('socials-status');
        if (status) status.textContent = 'Saving socials…';
        try {
          for (const p of SOCIAL_PLATFORMS) {
            const el = document.getElementById(p.inputId);
            if (!(el instanceof HTMLInputElement)) continue;
            const raw = (el.value || '').trim();
            // Normalize: if user typed only handle, prepend prefix; if they left the default prefix unchanged, treat as empty
            const hasRealValue = raw.length > p.prefix.length;
            const full = raw.startsWith(p.prefix) ? raw : (p.prefix + raw.replace(/^\/+/, ''));
            const existing = existingLinks[p.key];
            if (existing && !hasRealValue) {
              // Delete existing if now cleared or left at default
              await fetch('/api/profile/social/delete', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ linkId: existing.id }) });
              delete existingLinks[p.key];
            } else if (!existing && hasRealValue) {
              // Add new
              await fetch('/api/profile/social/add', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ siteSlug: currentSlugVar, platform: p.key, url: full }) });
              existingLinks[p.key] = { id: null, url: full };
            } else if (existing && hasRealValue && existing.url !== full) {
              // Replace: delete then add
              await fetch('/api/profile/social/delete', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ linkId: existing.id }) });
              await fetch('/api/profile/social/add', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ siteSlug: currentSlugVar, platform: p.key, url: full }) });
              existingLinks[p.key] = { id: null, url: full };
            }
          }
          if (status) status.textContent = 'Socials saved';
          refreshSideNavSocials();
        } catch (e) {
          if (status) status.textContent = 'Failed to save socials';
        }
      });

      // Removed other socials form behavior

      form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitter = (e && e.submitter) ? e.submitter : null;
        const id = submitter?.id || '';
        const map = {
          'save-site': siteStatus,
          'save-seo': seoStatus,
          'save-appearance': appearanceStatus,
        };
        const target = map[id] || siteStatus;
        if (target) target.textContent = 'Saving…';
        const res = await fetch(form.action, { method: 'POST', body: new FormData(form) });
        if (target) target.textContent = res.ok ? 'Saved' : 'Failed to save';
      });

      loadSettings();
    </script>
  </body>
</html>

<style>
.settings-main {
  max-width: none !important;
  padding: 3rem !important;
  margin: 0 !important;
  width: 100% !important;
}
.dashboard-header { margin-bottom: 2rem; }
.dashboard-header h1 { font-size: 2rem; font-weight: 700; margin-bottom: 0.25rem; color: hsl(0 0% 100% / 0.97); }
.welcome-text { color: hsl(0 0% 100% / 0.75); font-size: 1.025rem; }

.settings { margin-top: 2rem; }
.settings h2 { font-size: 1.25rem; color: hsl(0 0% 100% / 0.95); }
.settings .section-title { margin: 0; }
.section-card {
  background: hsl(0 0% 0% / 0.55);
  border: 1px solid hsl(0 0% 100% / 0.1);
  border-radius: 14px;
  padding: 1rem;
  margin-bottom: 1rem;
}
.section-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 1rem;
  padding: 0.25rem 0 0.75rem;
  border-bottom: 1px dashed hsl(0 0% 100% / 0.08);
  margin-bottom: 0.75rem;
}
.section-actions { display: inline-flex; align-items: center; gap: .5rem; }

.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 1rem; }
.grid .full { grid-column: 1 / -1; }
/* Your Site section as a vertical stack */
.site-stack { display: flex; flex-direction: column; gap: 1rem; }
label { display: flex; flex-direction: column; gap: .5rem; }
label span { color: var(--typography-muted); font-size: .9rem; }
/* Username row */
.username-row { display: grid; grid-template-columns: 12px 1fr auto; align-items: center; gap: .5rem; }
.username-row .prefix { color: var(--typography-subtle); }
.btn-small { padding: .45rem .7rem; border-radius: 8px; border: 1px solid hsl(0 0% 100% / 0.15); background: hsl(0 0% 100% / 0.08); color: inherit; cursor: pointer; }
.hint { color: var(--typography-subtle); }
input[type="text"], input[type="url"], textarea, select, input[type="color"] {
  background: hsl(0 0% 100% / 0.05);
  border: 1px solid hsl(0 0% 100% / 0.1);
  color: hsl(0 0% 100% / 0.95);
  border-radius: 10px; padding: .6rem .75rem; font: inherit;
}
.uploader { display: grid; grid-template-columns: 1fr auto; gap: 1rem; align-items: end; }
.uploader img { width: 120px; height: 80px; object-fit: cover; border-radius: 8px; border: 1px solid hsl(0 0% 100% / 0.1); }
.note { color: var(--typography-subtle); margin-top: 0.25rem; }
.domain-instructions { display: grid; gap: 0.5rem; }
.domain-instructions .records { display: flex; gap: 0.5rem; flex-wrap: wrap; }
.domain-instructions code { background: hsl(0 0% 100% / 0.06); border: 1px solid hsl(0 0% 100% / 0.12); padding: 0.25rem 0.5rem; border-radius: 8px; }
.domain-status { color: var(--typography-subtle); }
.domain-summary { display: flex; align-items: center; gap: .75rem; }
.domain-summary .label { color: var(--typography-muted); }
.domain-summary .link { color: var(--typography-link); text-decoration: none; }
.status-pill { padding: 0.2rem 0.5rem; border-radius: 999px; font-size: 0.75rem; border: 1px solid transparent; }
.pill-pending { background: hsl(0 0% 100% / 0.06); color: hsl(0 0% 80%); border-color: hsl(0 0% 100% / 0.12); }
.pill-verified { background: hsl(48 100% 50% / 0.15); color: hsl(48 100% 65%); border-color: hsl(48 100% 50% / 0.4); }
.pill-live { background: hsl(150 60% 25% / 0.25); color: hsl(150 70% 60%); border-color: hsl(150 60% 40% / 0.4); }
.pill-error { background: hsl(0 80% 40% / 0.2); color: hsl(0 80% 65%); border-color: hsl(0 80% 50% / 0.4); }
.start-link { align-self: start; background: transparent; border: 1px dashed hsl(0 0% 100% / 0.2); color: var(--typography-link); border-radius: 10px; padding: .5rem .75rem; cursor: pointer; }
.domain-details.hidden { display: none; }
.domain-controls { display: flex; gap: .5rem; }
.social-list { display: grid; gap: .5rem; margin-top: .5rem; }
.social-item { display: grid; grid-template-columns: 120px 1fr auto; align-items: center; gap: .75rem; padding: .5rem .75rem; border: 1px solid var(--color-border-subtle); border-radius: 10px; }
.social-item .platform { color: var(--typography-muted); text-transform: capitalize; }
.social-item .url { color: var(--typography-link); text-decoration: none; }
.social-item button, .actions .save, #add-social, .section-actions .save { padding: .6rem .85rem; border-radius: 10px; border: 1px solid hsl(0 0% 100% / 0.15); background: hsl(0 0% 100% / 0.08); color: inherit; cursor: pointer; }
.social-add { display: flex; gap: .5rem; margin-top: .5rem; }

/* New socials layout */
.socials-grid { display: grid; gap: 0.75rem; margin-top: 0.5rem; }
.social-row { display: grid; grid-template-columns: 24px 1fr; align-items: center; gap: .5rem; }
.social-row .icon { display: inline-flex; align-items: center; justify-content: center; color: var(--typography-subtle); }
.social-row input { background: hsl(0 0% 100% / 0.04); border: 1px solid hsl(0 0% 100% / 0.1); color: hsl(0 0% 100% / 0.95); border-radius: 8px; padding: .5rem .6rem; font: inherit; width: 100%; }
.socials-actions { margin-top: 0.5rem; }

/* removed other-socials UI styles */
.actions { display: flex; align-items: center; gap: .75rem; margin-top: 1rem; }
.status { color: var(--typography-subtle); }

@media (max-width: 768px) {
  .info-row { flex-direction: column; align-items: flex-start; gap: .4rem; }
}
</style>
