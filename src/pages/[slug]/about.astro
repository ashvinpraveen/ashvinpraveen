---
import BaseHead from '../../components/BaseHead.astro';
import CardLayout from '../../components/CardLayout.astro';
import GlobalEditToggle from '../../components/GlobalEditToggle.astro';
export const prerender = false;

const { slug } = Astro.params;
const user = await Astro.locals.currentUser();

// For now, we'll check if the slug matches the current user
// In the future, this could query a database for public profiles
let isOwner = false;
if (user) {
  const userSlug = user.username || user.primaryEmailAddress?.emailAddress?.split('@')[0] || '';
  isOwner = userSlug.toLowerCase() === slug?.toLowerCase();
}

const pageTitle = `About ${slug}`;
const pageDescription = `Learn more about ${slug}`;
---

<!doctype html>
<html lang="en" data-theme="dark">
	<head>
		<BaseHead title={pageTitle} description={pageDescription} />
	</head>
	<body>
		<CardLayout>
			<main>
				<div class="editor-container">
					<div id="editor" class="prose prose-invert max-w-none"></div>

					<!-- Bubble Menu -->
					<div id="bubble-menu" class="bubble-menu">
						<button class="menu-btn" data-action="bold">
							<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<path d="M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"/>
								<path d="M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"/>
							</svg>
						</button>
						<button class="menu-btn" data-action="italic">
							<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<line x1="19" y1="4" x2="10" y2="4"/>
								<line x1="14" y1="20" x2="5" y2="20"/>
								<line x1="15" y1="4" x2="9" y2="20"/>
							</svg>
						</button>
						<button class="menu-btn" data-action="link">
							<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<path d="m9 15 6-6"/>
								<path d="m21 3-6 6"/>
								<path d="M15 3h6v6"/>
								<path d="m9 21 6-6"/>
								<path d="M3 15h6v6"/>
							</svg>
						</button>
						<div class="menu-divider"></div>
						<button class="menu-btn" data-action="h1">H1</button>
						<button class="menu-btn" data-action="h2">H2</button>
						<button class="menu-btn" data-action="h3">H3</button>
					</div>

					<!-- Context Menu -->
					<div id="context-menu" class="context-menu">
						<!-- Text Formatting -->
						<div class="menu-section">
							<button class="menu-btn" data-action="bold">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"/>
									<path d="M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"/>
								</svg>
								Bold
							</button>
							<button class="menu-btn" data-action="italic">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<line x1="19" y1="4" x2="10" y2="4"/>
									<line x1="14" y1="20" x2="5" y2="20"/>
									<line x1="15" y1="4" x2="9" y2="20"/>
								</svg>
								Italic
							</button>
							<button class="menu-btn" data-action="underline">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"/>
									<line x1="4" y1="21" x2="20" y2="21"/>
								</svg>
								Underline
							</button>
							<button class="menu-btn" data-action="highlight">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="m9 11-6 6v3h3l6-6"/>
									<path d="m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4"/>
								</svg>
								Highlight
							</button>
						</div>

						<!-- Headings -->
						<div class="menu-section">
							<button class="menu-btn" data-action="h1">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="m4 20 8-16m0 16L20 4"/>
									<path d="M9 9h1m4 0h2"/>
								</svg>
								Heading 1
							</button>
							<button class="menu-btn" data-action="h2">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="m4 20 8-16m0 16L12 4"/>
									<path d="M9 9h1m2 0h1"/>
								</svg>
								Heading 2
							</button>
							<button class="menu-btn" data-action="h3">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="m4 20 8-16m0 16L12 4"/>
									<path d="M9 9h1m2 0h1"/>
								</svg>
								Heading 3
							</button>
						</div>

						<!-- Lists -->
						<div class="menu-section">
							<button class="menu-btn" data-action="bulletList">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<line x1="8" y1="6" x2="21" y2="6"/>
									<line x1="8" y1="12" x2="21" y2="12"/>
									<line x1="8" y1="18" x2="21" y2="18"/>
									<line x1="3" y1="6" x2="3.01" y2="6"/>
									<line x1="3" y1="12" x2="3.01" y2="12"/>
									<line x1="3" y1="18" x2="3.01" y2="18"/>
								</svg>
								Bullet List
							</button>
							<button class="menu-btn" data-action="orderedList">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<line x1="10" y1="6" x2="21" y2="6"/>
									<line x1="10" y1="12" x2="21" y2="12"/>
									<line x1="10" y1="18" x2="21" y2="18"/>
									<path d="M4 6h1v4"/>
									<path d="M4 10h2"/>
									<path d="M6 18H4c0-1 2-2 2-3s-1-1.5-1-1.5"/>
								</svg>
								Numbered List
							</button>
							<button class="menu-btn" data-action="taskList">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="M9 11l3 3 8-8"/>
									<path d="M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9c1.24 0 2.43.25 3.51.7"/>
								</svg>
								Task List
							</button>
						</div>

						<!-- Media -->
						<div class="menu-section">
							<button class="menu-btn" data-action="image">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<rect width="18" height="18" x="3" y="3" rx="2" ry="2"/>
									<circle cx="9" cy="9" r="2"/>
									<path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"/>
								</svg>
								Add Image
							</button>
							<button class="menu-btn" data-action="youtube">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"/>
									<polygon points="9.75,15.02 15.5,11.75 9.75,8.48"/>
								</svg>
								Add Video
							</button>
						</div>

						<!-- Advanced -->
						<div class="menu-section">
							<button class="menu-btn" data-action="table">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="M3 3h18v18H3V3z"/>
									<path d="M12 3v18"/>
									<path d="M3 9h18"/>
									<path d="M3 15h18"/>
								</svg>
								Add Table
							</button>
							<button class="menu-btn" data-action="blockquote">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z"/>
									<path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z"/>
								</svg>
								Quote
							</button>
							<button class="menu-btn" data-action="link">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>
									<path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"/>
								</svg>
								Add Link
							</button>
						</div>
					</div>

					<!-- URL/Upload Modal -->
					<div id="url-modal" class="url-modal">
						<div class="modal-content">
							<div class="modal-header">
								<h3 id="modal-title">Add Content</h3>
								<button id="close-modal" class="close-btn">Ã—</button>
							</div>
							<div class="modal-body">
								<div class="input-group">
									<input type="text" id="url-input" placeholder="Enter URL..." />
									<button id="url-submit" class="submit-btn">Add</button>
								</div>
								<div class="divider">
									<span>or</span>
								</div>
								<div class="upload-area">
									<input type="file" id="file-input" accept="image/*" style="display: none;" />
									<button id="upload-trigger" class="upload-btn">
										<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
											<polyline points="7,10 12,5 17,10"/>
											<line x1="12" y1="5" x2="12" y2="15"/>
										</svg>
										Upload Image
									</button>
								</div>
								<div id="upload-progress" class="upload-progress">
									<div class="progress-bar">
										<div id="progress-fill" class="progress-fill"></div>
									</div>
									<div id="progress-text" class="progress-text">Uploading...</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</main>
		</CardLayout>
		<GlobalEditToggle isOwner={isOwner} />

		<style>
			/* Global override for all focus outlines */
			* {
				outline: none !important;
			}

			*:focus {
				outline: none !important;
				border: none !important;
				box-shadow: none !important;
			}

			main {
				max-width: none;
				padding: 0rem;
			}

			.editor-container {
				max-width: none;
				margin: 0;
				position: relative;
				overflow: visible;
			}

			/* TipTap editor using Tailwind prose */
			#editor {
				min-height: 500px;
				outline: none !important;
				border: none;
				padding: 2rem;
				border-radius: 0px;
				transition: all 0.2s ease;
				cursor: text;
			}

			#editor[contenteditable="true"] {
				outline: none !important;
				border: none !important;
			}

			/* Remove focus outline from all TipTap content */
			#editor *:focus {
				outline: none !important;
				box-shadow: none !important;
			}

			/* Target TipTap's ProseMirror editor specifically */
			.ProseMirror {
				outline: none !important;
				border: none !important;
				box-shadow: none !important;
			}

			.ProseMirror:focus {
				outline: none !important;
				border: none !important;
				box-shadow: none !important;
			}

			/* Bubble Menu Styles */
			.bubble-menu {
				display: flex;
				gap: 0.25rem;
				align-items: center;
				background: hsl(0 0% 0% / 0.9);
				backdrop-filter: blur(20px);
				border: 1px solid hsl(0 0% 100% / 0.15);
				border-radius: 8px;
				padding: 0.5rem;
				box-shadow: 0 8px 24px hsl(0 0% 0% / 0.4);
				z-index: 1000;
				visibility: hidden;
				opacity: 0;
				transition: all 0.2s ease;
			}

			/* Menu Button Styles */
			.menu-btn {
				display: flex;
				align-items: center;
				gap: 0.75rem;
				padding: 0.5rem;
				background: hsl(0 0% 100% / 0.06);
				border: 1px solid hsl(0 0% 100% / 0.1);
				border-radius: 6px;
				color: hsl(0 0% 100% / 0.7);
				cursor: pointer;
				font-size: 0.875rem;
				font-weight: 500;
				transition: all 0.15s ease;
				white-space: nowrap;
				width: auto;
				text-align: left;
				justify-content: center;
			}

			.menu-btn:hover {
				background: hsl(0 0% 100% / 0.15);
				border-color: hsl(0 0% 100% / 0.25);
			}

			.menu-btn.active {
				background: hsl(235 100% 60% / 0.2);
				border-color: hsl(235 100% 60% / 0.4);
				color: hsl(235 100% 80%);
			}

			.menu-divider {
				width: 1px;
				height: 1.5rem;
				background: hsl(0 0% 100% / 0.15);
				margin: 0 0.25rem;
			}

			/* Context Menu Styles */
			.context-menu {
				display: flex;
				flex-direction: column;
				gap: 0;
				background: hsl(0 0% 0% / 0.95);
				backdrop-filter: blur(20px);
				border: 1px solid hsl(0 0% 100% / 0.15);
				border-radius: 8px;
				padding: 0.25rem;
				box-shadow: 0 8px 24px hsl(0 0% 0% / 0.4);
				z-index: 9999 !important;
				visibility: hidden;
				opacity: 0;
				transition: all 0.15s ease;
				min-width: 180px;
				max-width: 220px;
				max-height: 80vh;
				overflow-y: auto;
				position: fixed !important;
				pointer-events: auto !important;
			}

			.menu-section {
				display: flex;
				flex-direction: column;
				gap: 0;
				padding: 0.25rem 0;
			}

			.menu-section:not(:last-child) {
				border-bottom: 1px solid hsl(0 0% 100% / 0.08);
				margin-bottom: 0.25rem;
				padding-bottom: 0.5rem;
			}

			/* Context menu buttons - vertical layout */
			.context-menu .menu-btn {
				padding: 0.75rem;
				background: transparent;
				border: none;
				width: 100%;
				justify-content: flex-start;
			}

			.context-menu .menu-btn:hover {
				background: hsl(0 0% 100% / 0.08);
			}

			/* Modal Styles */
			.url-modal {
				position: fixed;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				background: hsl(0 0% 0% / 0.8);
				backdrop-filter: blur(8px);
				display: flex;
				align-items: center;
				justify-content: center;
				z-index: 10000;
				opacity: 0;
				visibility: hidden;
				transition: all 0.2s ease;
			}

			.url-modal.active {
				opacity: 1;
				visibility: visible;
			}

			.modal-content {
				background: hsl(0 0% 0% / 0.95);
				backdrop-filter: blur(20px);
				border: 1px solid hsl(0 0% 100% / 0.15);
				border-radius: 12px;
				padding: 0;
				min-width: 400px;
				max-width: 500px;
				box-shadow: 0 20px 40px hsl(0 0% 0% / 0.3);
				transform: scale(0.95);
				transition: transform 0.2s ease;
			}

			.url-modal.active .modal-content {
				transform: scale(1);
			}

			.modal-header {
				padding: 1.5rem;
				border-bottom: 1px solid hsl(0 0% 100% / 0.1);
				display: flex;
				align-items: center;
				justify-content: space-between;
			}

			.modal-header h3 {
				margin: 0;
				color: hsl(0 0% 90%);
				font-size: 1.1rem;
				font-weight: 600;
			}

			.close-btn {
				background: none;
				border: none;
				color: hsl(0 0% 70%);
				font-size: 1.5rem;
				cursor: pointer;
				padding: 0.25rem;
				transition: color 0.2s ease;
			}

			.close-btn:hover {
				color: hsl(0 0% 90%);
			}

			.modal-body {
				padding: 1.5rem;
			}

			.input-group {
				display: flex;
				gap: 0.75rem;
				margin-bottom: 1rem;
			}

			.input-group input {
				flex: 1;
				padding: 0.75rem;
				background: hsl(0 0% 100% / 0.05);
				border: 1px solid hsl(0 0% 100% / 0.15);
				border-radius: 8px;
				color: hsl(0 0% 90%);
				font-size: 0.875rem;
				transition: all 0.2s ease;
			}

			.input-group input:focus {
				outline: none;
				border-color: hsl(235 100% 60%);
				background: hsl(0 0% 100% / 0.08);
			}

			.input-group input::placeholder {
				color: hsl(0 0% 50%);
			}

			.submit-btn, .upload-btn {
				padding: 0.75rem 1.5rem;
				background: hsl(235 100% 60%);
				border: none;
				border-radius: 8px;
				color: white;
				font-size: 0.875rem;
				font-weight: 500;
				cursor: pointer;
				transition: all 0.2s ease;
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.submit-btn:hover, .upload-btn:hover {
				background: hsl(235 100% 55%);
				transform: translateY(-1px);
			}

			.divider {
				text-align: center;
				position: relative;
				margin: 1.5rem 0;
				color: hsl(0 0% 60%);
				font-size: 0.875rem;
			}

			.divider::before {
				content: '';
				position: absolute;
				top: 50%;
				left: 0;
				right: 0;
				height: 1px;
				background: hsl(0 0% 100% / 0.1);
				z-index: -1;
			}

			.divider span {
				background: hsl(0 0% 0% / 0.95);
				padding: 0 1rem;
			}

			.upload-area {
				text-align: center;
			}

			.upload-btn {
				width: 100%;
				justify-content: center;
				background: hsl(0 0% 100% / 0.05);
				color: hsl(0 0% 80%);
				border: 2px dashed hsl(0 0% 100% / 0.2);
			}

			.upload-btn:hover {
				background: hsl(0 0% 100% / 0.08);
				border-color: hsl(235 100% 60%);
				color: hsl(235 100% 80%);
			}

			.upload-progress {
				display: none;
				margin-top: 1rem;
			}

			.progress-bar {
				width: 100%;
				height: 8px;
				background: hsl(0 0% 100% / 0.1);
				border-radius: 4px;
				overflow: hidden;
				margin-bottom: 0.5rem;
			}

			.progress-fill {
				height: 100%;
				background: linear-gradient(90deg, hsl(235 100% 60%), hsl(260 100% 60%));
				width: 0%;
				transition: width 0.3s ease;
				border-radius: 4px;
			}

			.progress-text {
				text-align: center;
				color: hsl(0 0% 70%);
				font-size: 0.875rem;
			}
		</style>

		<script type="module" define:vars={{ isOwner, slug }}>
			import { Editor } from 'https://esm.sh/@tiptap/core@3.4.2'
			import StarterKit from 'https://esm.sh/@tiptap/starter-kit@3.4.2'
			import Placeholder from 'https://esm.sh/@tiptap/extension-placeholder@3.4.2'
			import Link from 'https://esm.sh/@tiptap/extension-link@3.4.2'
			import Image from 'https://esm.sh/@tiptap/extension-image@3.4.2'
			import Youtube from 'https://esm.sh/@tiptap/extension-youtube@3.4.2'
			import BubbleMenu from 'https://esm.sh/@tiptap/extension-bubble-menu@3.4.2'
			import { TableKit } from 'https://esm.sh/@tiptap/extension-table@3.4.2'
			import TaskList from 'https://esm.sh/@tiptap/extension-task-list@3.4.2'
			import TaskItem from 'https://esm.sh/@tiptap/extension-task-item@3.4.2'
			import Underline from 'https://esm.sh/@tiptap/extension-underline@3.4.2'
			import Highlight from 'https://esm.sh/@tiptap/extension-highlight@3.4.2'

			let editor = null;
			let isEditMode = false;

			// Initialize editor when page loads
			document.addEventListener('DOMContentLoaded', function() {
				console.log('DOM loaded, initializing TipTap editor...');
				initializeEditor();

				// Listen for global edit mode changes
				window.addEventListener('editModeChanged', function(e) {
					isEditMode = e.detail.isEditMode;
					if (editor) {
						const shouldBeEditable = isOwner && isEditMode;
						editor.setEditable(shouldBeEditable);
					}
				});
			});

			function initializeEditor() {
				editor = new Editor({
					element: document.querySelector('#editor'),
					extensions: [
						StarterKit.configure({
							link: false,
							underline: false,
						}),
						Placeholder.configure({
							placeholder: isOwner ? 'Start writing your about page...' : 'No about information yet.',
						}),
						Link.configure({
							openOnClick: false,
							HTMLAttributes: {
								class: 'editor-link',
							},
						}),
						Image.configure({
							inline: false,
							allowBase64: false,
							HTMLAttributes: {
								class: 'editor-image',
							},
						}),
						Youtube.configure({
							inline: false,
							width: 640,
							height: 360,
							controls: true,
							nocookie: true,
							allowFullscreen: true,
							HTMLAttributes: {
								class: 'youtube-video',
							},
						}),
						TableKit.configure({
							resizable: true,
						}),
						TaskList,
						TaskItem.configure({
							nested: true,
						}),
						Underline,
						Highlight,
						BubbleMenu.configure({
							element: document.querySelector('#bubble-menu'),
							shouldShow: ({ from, to }) => {
								return isEditMode && from !== to;
							},
						}),
					],
					content: getInitialContent(),
					editable: false,
					editorProps: {
						attributes: {
							class: 'prose prose-invert max-w-none',
						},
					},
				});

				// Setup menu event listeners
				setupMenuEventListeners();
				setupContextMenu();

				// Set initial edit mode based on saved state
				const savedMode = localStorage.getItem('editMode') === 'true';
				if (savedMode && isOwner) {
					isEditMode = true;
					editor.setEditable(true);
				}
			}

			function getInitialContent() {
				if (isOwner) {
					return `
						<h1>About ${slug}</h1>
						<p>Welcome to my about page! Here are some ideas for what you can include:</p>
						<h2>Who am I?</h2>
						<p>Tell people about yourself, your background, and what you're passionate about.</p>
						<h2>What do I do?</h2>
						<p>Share your work, projects, or interests. You can use <strong>markdown formatting</strong> like:</p>
						<ul>
							<li><strong>Bold text</strong> for emphasis</li>
							<li><em>Italic text</em> for subtle emphasis</li>
							<li>Lists like this one</li>
							<li>Links to your <a href="https://example.com">favorite websites</a></li>
						</ul>
						<h2>How to reach me</h2>
						<p>Add your contact information or social media links here.</p>
						<blockquote>
							<p>ðŸ’¡ <em>Tip: You can delete this template and write whatever you want. Use the heading styles, lists, links, and formatting to make it your own!</em></p>
						</blockquote>
					`;
				} else {
					return '<p>No about information yet.</p>';
				}
			}

			function setupMenuEventListeners() {
				// Bubble menu event listeners
				document.querySelectorAll('#bubble-menu .menu-btn').forEach(btn => {
					btn.addEventListener('click', (e) => {
						const action = e.currentTarget.dataset.action;
						handleMenuAction(action);
					});
				});

				// Context menu event listeners
				document.querySelectorAll('#context-menu .menu-btn').forEach(btn => {
					btn.addEventListener('click', (e) => {
						const action = e.currentTarget.dataset.action;
						handleMenuAction(action);
						hideContextMenu();
					});
				});

				editor.on('selectionUpdate', updateMenuStates);
			}

			function setupContextMenu() {
				const contextMenu = document.querySelector('#context-menu');
				const editorElement = document.querySelector('#editor');

				// Attach to document to catch all right-clicks, then check if inside editor
				document.addEventListener('contextmenu', (e) => {
					if (!isEditMode || !isOwner) return; // Only show in edit mode

					// Check if the right-click happened inside the editor
					const editorRect = editorElement.getBoundingClientRect();
					const isInsideEditor = (
						e.clientX >= editorRect.left &&
						e.clientX <= editorRect.right &&
						e.clientY >= editorRect.top &&
						e.clientY <= editorRect.bottom
					);

					if (isInsideEditor) {
						e.preventDefault();
						e.stopPropagation();
						showContextMenu(e.clientX, e.clientY);
					}
				}, true);

				// Hide context menu when clicking elsewhere
				document.addEventListener('click', (e) => {
					if (!contextMenu.contains(e.target)) {
						hideContextMenu();
					}
				});

				// Hide context menu on scroll or resize
				document.addEventListener('scroll', hideContextMenu);
				window.addEventListener('resize', hideContextMenu);
			}

			function showContextMenu(x, y) {
				const contextMenu = document.querySelector('#context-menu');

				if (!contextMenu) return;

				// Move the menu to document body to avoid any container transform issues
				if (contextMenu.parentElement !== document.body) {
					document.body.appendChild(contextMenu);
				}

				// Position the menu using fixed positioning
				contextMenu.style.position = 'fixed';
				contextMenu.style.left = x + 'px';
				contextMenu.style.top = y + 'px';
				contextMenu.style.zIndex = '9999';
				contextMenu.style.visibility = 'visible';
				contextMenu.style.opacity = '1';
				contextMenu.style.pointerEvents = 'auto';

				// Smart positioning to keep menu in viewport
				requestAnimationFrame(() => {
					const menuRect = contextMenu.getBoundingClientRect();
					let adjustedX = x;
					let adjustedY = y;

					if (x + menuRect.width > window.innerWidth) {
						adjustedX = x - menuRect.width;
					}

					if (y + menuRect.height > window.innerHeight) {
						adjustedY = y - menuRect.height;
					}

					adjustedX = Math.max(8, adjustedX);
					adjustedY = Math.max(8, adjustedY);

					contextMenu.style.left = adjustedX + 'px';
					contextMenu.style.top = adjustedY + 'px';
				});
			}

			function hideContextMenu() {
				const contextMenu = document.querySelector('#context-menu');
				if (contextMenu) {
					contextMenu.style.visibility = 'hidden';
					contextMenu.style.opacity = '0';
				}
			}

			function handleMenuAction(action) {
				if (!editor) return;

				switch (action) {
					// Text formatting
					case 'bold':
						editor.chain().focus().toggleBold().run();
						break;
					case 'italic':
						editor.chain().focus().toggleItalic().run();
						break;
					case 'underline':
						editor.chain().focus().toggleUnderline().run();
						break;
					case 'highlight':
						editor.chain().focus().toggleHighlight().run();
						break;

					// Headings
					case 'h1':
						editor.chain().focus().toggleHeading({ level: 1 }).run();
						break;
					case 'h2':
						editor.chain().focus().toggleHeading({ level: 2 }).run();
						break;
					case 'h3':
						editor.chain().focus().toggleHeading({ level: 3 }).run();
						break;

					// Lists
					case 'bulletList':
						editor.chain().focus().toggleBulletList().run();
						break;
					case 'orderedList':
						editor.chain().focus().toggleOrderedList().run();
						break;
					case 'taskList':
						editor.chain().focus().toggleTaskList().run();
						break;

					// Media
					case 'image':
						showModal('Add Image', 'image');
						break;
					case 'youtube':
						showModal('Add YouTube Video', 'youtube');
						break;
					case 'spotify':
						showModal('Add Spotify Embed', 'spotify');
						break;

					// Advanced
					case 'table':
						editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run();
						break;
					case 'blockquote':
						editor.chain().focus().toggleBlockquote().run();
						break;
					case 'link':
						showModal('Add Link', 'link');
						break;
				}
			}

			function updateMenuStates() {
				if (!editor) return;

				// Update all menu button states (bubble and context menus)
				document.querySelectorAll('.menu-btn').forEach(btn => {
					const action = btn.dataset.action;
					btn.classList.remove('active');

					switch (action) {
						// Text formatting
						case 'bold':
							if (editor.isActive('bold')) btn.classList.add('active');
							break;
						case 'italic':
							if (editor.isActive('italic')) btn.classList.add('active');
							break;
						case 'underline':
							if (editor.isActive('underline')) btn.classList.add('active');
							break;
						case 'highlight':
							if (editor.isActive('highlight')) btn.classList.add('active');
							break;

						// Headings
						case 'h1':
							if (editor.isActive('heading', { level: 1 })) btn.classList.add('active');
							break;
						case 'h2':
							if (editor.isActive('heading', { level: 2 })) btn.classList.add('active');
							break;
						case 'h3':
							if (editor.isActive('heading', { level: 3 })) btn.classList.add('active');
							break;

						// Lists
						case 'bulletList':
							if (editor.isActive('bulletList')) btn.classList.add('active');
							break;
						case 'orderedList':
							if (editor.isActive('orderedList')) btn.classList.add('active');
							break;
						case 'taskList':
							if (editor.isActive('taskList')) btn.classList.add('active');
							break;

						// Advanced
						case 'blockquote':
							if (editor.isActive('blockquote')) btn.classList.add('active');
							break;
						case 'link':
							if (editor.isActive('link')) btn.classList.add('active');
							break;
					}
				});
			}

			// Modal functionality
			let modalResolve = null;
			let currentModalType = null;

			function showModal(title, type) {
				currentModalType = type;
				const modal = document.getElementById('url-modal');
				const modalTitle = document.getElementById('modal-title');
				const urlInput = document.getElementById('url-input');

				modalTitle.textContent = title;

				// Update placeholder based on type
				switch (type) {
					case 'image':
						urlInput.placeholder = 'Enter image URL...';
						break;
					case 'youtube':
						urlInput.placeholder = 'Enter YouTube URL...';
						break;
					case 'spotify':
						urlInput.placeholder = 'Enter Spotify URL...';
						break;
					case 'link':
						urlInput.placeholder = 'Enter URL...';
						break;
				}

				modal.classList.add('active');
				urlInput.focus();

				return new Promise((resolve) => {
					modalResolve = resolve;
				});
			}

			function hideModal() {
				const modal = document.getElementById('url-modal');
				modal.classList.remove('active');
				document.getElementById('url-input').value = '';
				document.getElementById('upload-progress').style.display = 'none';
				document.getElementById('progress-fill').style.width = '0%';
			}

			function setupModalEventListeners() {
				// Close modal events
				document.getElementById('close-modal').addEventListener('click', hideModal);
				document.getElementById('url-modal').addEventListener('click', (e) => {
					if (e.target.id === 'url-modal') hideModal();
				});

				// URL submit
				document.getElementById('url-submit').addEventListener('click', handleUrlSubmit);
				document.getElementById('url-input').addEventListener('keypress', (e) => {
					if (e.key === 'Enter') handleUrlSubmit();
				});

				// File upload
				document.getElementById('upload-trigger').addEventListener('click', () => {
					document.getElementById('file-input').click();
				});

				document.getElementById('file-input').addEventListener('change', handleFileUpload);
			}

			function handleUrlSubmit() {
				const url = document.getElementById('url-input').value.trim();
				if (!url) return;

				switch (currentModalType) {
					case 'image':
						editor.chain().focus().setImage({ src: url }).run();
						break;
					case 'youtube':
						editor.chain().focus().setYoutubeVideo({ src: url }).run();
						break;
					case 'spotify':
						// For Spotify, we'll embed as iframe for now
						const spotifyHtml = `<iframe src="${url}" width="100%" height="352" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>`;
						editor.chain().focus().insertContent(spotifyHtml).run();
						break;
					case 'link':
						editor.chain().focus().setLink({ href: url }).run();
						break;
				}

				if (modalResolve) {
					modalResolve(url);
					modalResolve = null;
				}

				hideModal();
			}

			async function handleFileUpload(event) {
				const file = event.target.files[0];
				if (!file) return;

				try {
					// Show progress
					const uploadProgress = document.getElementById('upload-progress');
					const progressFill = document.getElementById('progress-fill');
					const progressText = document.getElementById('progress-text');

					uploadProgress.style.display = 'block';
					progressText.textContent = 'Compressing image...';
					progressFill.style.width = '20%';

					// Compress the image
					const compressed = await compressImage(file);
					progressFill.style.width = '50%';
					progressText.textContent = 'Uploading to server...';

					// Generate new filename with appropriate extension
					const baseName = file.name.replace(/\.[^/.]+$/, ''); // Remove extension
					const extension = compressed.mimeType.split('/')[1]; // Get extension from mime type
					const newFilename = `${baseName}.${extension}`;

					// Upload to Convex
					const imageUrl = await uploadImageToConvex(compressed.dataUrl, newFilename, compressed.mimeType);
					progressFill.style.width = '100%';
					progressText.textContent = 'Upload complete!';

					// Resolve with the image URL
					if (modalResolve) {
						modalResolve(imageUrl);
						modalResolve = null;
					}

					// Add image to editor
					editor.chain().focus().setImage({ src: imageUrl }).run();

					// Close modal after a short delay
					setTimeout(() => {
						hideModal();
					}, 500);

				} catch (error) {
					console.error('Upload failed:', error);
					const progressText = document.getElementById('progress-text');
					progressText.textContent = 'Upload failed. Please try again.';
					progressText.style.color = 'hsl(0 70% 60%)';
				}
			}

			// Compress image client-side with AVIF support
			function compressImage(file, maxWidth = 1200, quality = 0.8) {
				return new Promise((resolve) => {
					const canvas = document.createElement('canvas');
					const ctx = canvas.getContext('2d');
					const img = new window.Image();

					img.onload = () => {
						// Calculate new dimensions
						let { width, height } = img;

						if (width > maxWidth) {
							height = (height * maxWidth) / width;
							width = maxWidth;
						}

						// Set canvas size
						canvas.width = width;
						canvas.height = height;

						// Draw image
						ctx.drawImage(img, 0, 0, width, height);

						const originalSize = file.size;

						// Try AVIF first (best compression and quality)
						canvas.toBlob((avifBlob) => {
							if (avifBlob) {
								const reader = new FileReader();
								reader.onload = () => {
									console.log(`Image compressed to AVIF: ${originalSize} â†’ ${avifBlob.size} bytes (${Math.round(100 - (avifBlob.size/originalSize)*100)}% reduction)`);
									resolve({ dataUrl: reader.result, mimeType: 'image/avif', blob: avifBlob });
								};
								reader.readAsDataURL(avifBlob);
							} else {
								// Fallback to WebP
								canvas.toBlob((webpBlob) => {
									if (webpBlob) {
										const reader = new FileReader();
										reader.onload = () => {
											console.log(`Image compressed to WebP: ${originalSize} â†’ ${webpBlob.size} bytes (${Math.round(100 - (webpBlob.size/originalSize)*100)}% reduction)`);
											resolve({ dataUrl: reader.result, mimeType: 'image/webp', blob: webpBlob });
										};
										reader.readAsDataURL(webpBlob);
									} else {
										// Final fallback to JPEG
										canvas.toBlob((jpegBlob) => {
											const reader = new FileReader();
											reader.onload = () => {
												console.log(`Image compressed to JPEG: ${originalSize} â†’ ${jpegBlob.size} bytes (${Math.round(100 - (jpegBlob.size/originalSize)*100)}% reduction)`);
												resolve({ dataUrl: reader.result, mimeType: 'image/jpeg', blob: jpegBlob });
											};
											reader.readAsDataURL(jpegBlob);
										}, 'image/jpeg', quality);
									}
								}, 'image/webp', quality);
							}
						}, 'image/avif', 0.7); // Slightly lower quality for AVIF as it's more efficient
					};

					img.src = URL.createObjectURL(file);
				});
			}

			// Upload compressed image to Convex
			async function uploadImageToConvex(imageData, filename, mimeType) {
				// Get current user (you'll need to implement this based on your auth setup)
				const userId = getCurrentUserId(); // This needs to be implemented

				try {
					const response = await fetch('/api/images/upload', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							imageData,
							filename,
							mimeType,
							userId,
						}),
					});

					if (!response.ok) {
						throw new Error('Upload failed');
					}

					const result = await response.json();
					return result.imageUrl;
				} catch (error) {
					console.error('Upload error:', error);
					throw error;
				}
			}

			// Placeholder function for getting current user ID
			function getCurrentUserId() {
				// This should return the current user's ID from your auth system
				// For now, returning null which should still work for testing
				return null;
			}

			// Initialize modal event listeners when DOM is loaded
			document.addEventListener('DOMContentLoaded', function() {
				setupModalEventListeners();
			});
		</script>
	</body>
</html>