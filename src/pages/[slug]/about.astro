---
import BaseHead from '../../components/BaseHead.astro';
import { ConvexHttpClient } from 'convex/browser';
import { api } from '../../../convex/_generated/api';
import CardLayout from '../../components/CardLayout.astro';
import GlobalEditToggle from '../../components/GlobalEditToggle.astro';
import EnhancedTipTapEditor from '../../components/EnhancedTipTapEditor.astro';
import ConvexProviderWrapper from '../../components/ConvexProviderWrapper.tsx';
export const prerender = false;

const { slug } = Astro.params;
let siteSettings: any = null;
try {
  const client = new ConvexHttpClient(import.meta.env.CONVEX_URL || import.meta.env.PUBLIC_CONVEX_URL);
  const resolved = await client.query(api.sites.resolveSlug, { slug });
  if (resolved?.redirect && resolved?.canonicalSlug) {
    return Astro.redirect(`/${resolved.canonicalSlug}/about`);
  }
  const actualSlug = resolved?.canonicalSlug || slug;
  siteSettings = await client.query(api.sites.getSettings, { slug: actualSlug });
} catch {}
const user = await Astro.locals.currentUser();
let isOwner = false;
try {
  const client2 = new ConvexHttpClient(import.meta.env.CONVEX_URL || import.meta.env.PUBLIC_CONVEX_URL);
  if (user?.id) {
    const sites = await client2.query(api.sites.listSitesForClerk, { clerkUserId: user.id });
    const current = (siteSettings?.slug || slug).toLowerCase();
    isOwner = Array.isArray(sites) && sites.some((s: any) => (s?.slug || '').toLowerCase() === current);
  }
} catch {}

const pageTitle = `About ${slug}`;
const pageDescription = `Learn more about ${slug}`;
---

<!doctype html>
<html lang="en" data-theme="dark">
	<head>
		<BaseHead title={siteSettings?.seoTitle || pageTitle} description={siteSettings?.seoDescription || pageDescription} imageUrl={siteSettings?.ogImageId ? `/api/images/${siteSettings.ogImageId}` : undefined} isUserPage={true} />
		<script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
	</head>
	<body data-is-owner={isOwner} data-slug={slug}>
		<CardLayout>
			<main>
				<!-- ============================================ -->
				<!-- ENHANCED TIPTAP EDITOR (Now Componentized!) -->
				<!-- ============================================ -->
				<EnhancedTipTapEditor
					id="editor"
					placeholder={isOwner ? 'Start writing your about page...' : 'No about information yet.'}
					editable={false}
					showBubbleMenu={true}
					showContextMenu={true}
					showUploadModal={true}
					isOwner={isOwner}
					slug={slug}
					pageKey="about"
					class="editor-container"
				/>
			</main>
		</CardLayout>
		<GlobalEditToggle isOwner={isOwner} />

		<!-- Convex Provider Wrapper for Real-time Streaming -->
		<ConvexProviderWrapper key="about-page" slug={slug} editorId="editor" isOwner={isOwner} pageKey="about" pageTitle="About" client:load />

		<!-- ============================================ -->
		<!-- MINIMAL STYLES FOR EDITOR CONTAINER -->
		<!-- ============================================ -->
		<style>
			/* Override global main constraints for full-width editor with high specificity */
			:global(.content-area) main {
				max-width: none !important;
				padding: 0rem !important;
				margin: 0 !important;
				width: 100% !important;
			}

			/* Additional overrides to ensure full width */
			.content-area main {
				max-width: none !important;
				padding: 0rem !important;
				margin: 0 !important;
				width: 100% !important;
			}

			main {
				max-width: none !important;
				padding: 0rem !important;
				margin: 0 !important;
				width: 100% !important;
			}

			.editor-container {
				width: 100%;
				max-width: none;
				margin: 0;
				position: relative;
				overflow: visible;
			}
		</style>

		<!-- ============================================ -->
		<!-- INITIALIZE EDIT MODE FROM GLOBAL TOGGLE -->
		<!-- ============================================ -->
		<script type="module">
			console.log('üö® About page script starting to load...');
			let isEditMode = false;

			// Get page configuration from data attributes
			function getPageConfig() {
				const bodyElement = document.body;
				return {
					isOwner: bodyElement.dataset.isOwner === 'true',
					slug: bodyElement.dataset.slug
				};
			}

			// Initialize when page loads
			document.addEventListener('DOMContentLoaded', function() {
				console.log('üåü About page DOM loaded, starting initialization...');
				const config = getPageConfig();
				console.log('‚öôÔ∏è Page config:', config);
				console.log('üîß About page loaded, setting up edit mode integration...');

				// Listen for global edit mode changes
				window.addEventListener('editModeChanged', function(e) {
					isEditMode = e.detail.isEditMode;

					// Get the enhanced editor instance
					const editorInstance = window[`editorEditor`];
					if (editorInstance && editorInstance.getEditor()) {
						const shouldBeEditable = config.isOwner && isEditMode;
						editorInstance.setEditable(shouldBeEditable);
					}
				});

				// Set initial edit mode based on saved state
				const savedMode = localStorage.getItem('editMode') === 'true';
				if (savedMode && config.isOwner) {
					isEditMode = true;
					// Trigger the event to update editor
					window.dispatchEvent(new CustomEvent('editModeChanged', {
						detail: { isEditMode: true }
					}));
				}

				// Initialize Lucide icons
				if (typeof lucide !== 'undefined') {
					lucide.createIcons();
				}
			});
		</script>
	</body>
</html>
